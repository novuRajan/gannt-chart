{"version":3,"file":"gantt.min.js","sources":["../js/date-utl.js","../js/updatechart.js","../js/saveEdit.js","../js/gantchart.js"],"sourcesContent":["import GanttChart from \"./gantchart.js\";\nconst svgNS = 'http://www.w3.org/2000/svg';\n\nexport function createGridLines(dateGroup, chartWidth, taskCount) {\n    const gridLines = document.createElementNS(svgNS, 'g');\n    gridLines.classList.add('lines')\n    dateGroup.appendChild(gridLines)\n    for (let i = 0; i <= chartWidth; i += 50) {\n        const line = document.createElementNS(svgNS, 'line');\n        line.setAttribute('x1', i);\n        line.setAttribute('x2', i);\n        line.setAttribute('y1', 35);\n        line.setAttribute('y2', taskCount * 40 + 40);\n        line.classList.add('grid-line');\n        gridLines.appendChild(line);\n    }\n}\n\nexport function createMonthHeadings(dateGroup, dateInfo, chartWidth) {\n    const month = document.createElementNS(svgNS, 'g');\n    month.classList.add('month')\n    dateGroup.appendChild(month)\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    let currentMonth = -1;\n\n    for (let i = 0; i <= chartWidth; i += 50) {\n        const currentDate = new Date(dateInfo.startingDate.getTime() + i / 50 * (24 * 60 * 60 * 1000));\n        const monthIndex = currentDate.getMonth();\n        if (monthIndex !== currentMonth) {\n            currentMonth = monthIndex;\n\n            const monthHeading = document.createElementNS(svgNS, 'text');\n            monthHeading.setAttribute('x', i);\n            monthHeading.setAttribute('y', 10);\n            monthHeading.classList.add('month-heading');\n            monthHeading.textContent = months[currentMonth];\n            month.appendChild(monthHeading);\n        }\n    }\n}\n\nexport function createDateScale(dateGroup, dateInfo, chartWidth, taskCount) {\n    const date = document.createElementNS(svgNS, 'g')\n    dateGroup.appendChild(date)\n    date.classList.add('date')\n    const dateScale = document.createElementNS(svgNS, 'text');\n    dateScale.setAttribute('x', '0');\n    dateScale.setAttribute('y', taskCount);\n    date.appendChild(dateScale);\n    const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    for (let i = 0; i <= chartWidth; i += 50) {\n        const currentDate = new Date(dateInfo.startingDate.getTime() + i / 50 * (24 * 60 * 60 * 1000));\n        const day = document.createElementNS(svgNS, 'text');\n        day.setAttribute('x', i - 3);\n        day.setAttribute('y', 25);\n        day.setAttribute('font-size','12px')\n        if(currentDate.getDay() === 0 || currentDate.getDay() === 6){\n            day.setAttribute('fill','red')\n        }\n        day.textContent = daysOfWeek[currentDate.getDay()]\n        date.appendChild(day)\n    }\n}\n\nexport function createDivDateScale(dateInfo, chartWidth, taskCount) {\n    const dateDiv = document.createElement('div')\n    dateDiv.setAttribute('id','div-date')\n    dateDiv.classList.add('date')\n    const dateScale = document.createElement('div');\n    dateScale.setAttribute('x', '0');\n    dateScale.setAttribute('y', taskCount);\n    dateDiv.appendChild(dateScale);\n    const width = GanttChart.returnWidth();\n    const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    for (let i = 0; i <= chartWidth; i += 50) {\n        const currentDate = new Date(dateInfo.startingDate.getTime() + i / 50 * (24 * 60 * 60 * 1000));\n        const day = document.createElement('div');\n      \n        day.setAttribute('font-size','10px')\n        day.setAttribute('y', 30);\n        day.textContent = `${currentDate.getDate()}`;\n        // const day = document.createElement('div');\n        // day.setAttribute('x', i - 3);\n        // day.setAttribute('y', 20);\n        // day.setAttribute('font-size','10px')\n        if(currentDate.getDay() === 0 || currentDate.getDay() === 6){\n            day.setAttribute('style',`position:absolute;left:${i*width/chartWidth-5}px;color:red`)\n        }\n        else{\n            day.setAttribute('style', `position:absolute;left:${i*width/chartWidth-5}px`);\n        }\n        // day.dayContent = daysOfWeek[currentDate.getDay()]\n        dateDiv.appendChild(day);\n        // dateDiv.appendChild(day)\n    }\n    console.log('width',width)\n    return dateDiv;\n}\n","export const updateTaskStartEndDates = (tasks) => {\n  const taskMap = new Map(tasks.map(task => [task.id, task]));\n\n  tasks.forEach(task => {\n    updateTaskDates(task, taskMap);\n    updateSubTaskStartEndDate(task);\n  });\n\n}\nfunction updateTaskDates(task, taskMap) {\n  if (task.dependencies.length === 0) {\n    return; // Base case: no dependencies, nothing to update\n  }\n\n  const dependentTasks = task.dependencies.map(depId => taskMap.get(depId));\n\n  // Find the maximum end date among dependent tasks\n  const maxEndDate = new Date(Math.max(...dependentTasks.map(depTask => new Date(depTask.end))));\n\n  dependentTasks.forEach(dependentTask => {\n    updateTaskDates(dependentTask, taskMap);\n\n    // Calculate the duration of the task\n    const duration = (new Date(task.end) - new Date(task.start)) / (24 * 60 * 60 * 1000);\n\n    // Check if the start date of the dependent task is after the max end date\n    if (new Date(task.start) < maxEndDate) {\n      // Update the start date of the current task based on the maximum end date of dependent tasks\n      task.start = maxEndDate.toISOString().split('T')[0];\n\n      // Update the end date of the current task based on its duration\n      task.end = new Date(new Date(task.start).setDate(new Date(task.start).getDate() + duration)).toISOString().split('T')[0];\n    }\n  });\n\n}\n\nfunction updateSubTaskStartEndDate(task) {\n  // Check if the task has subtasks\n  if (task.subTask && task.subTask.length > 0) {\n    const subTaskMap = new Map(task.subTask.map(subtask => [subtask.id, subtask]));\n    task.subTask.forEach(subTask => {\n      const subDuration = (new Date(subTask.end) - new Date(subTask.start)) / (24 * 60 * 60 * 1000);\n      // Example condition: If subtask start date is less than task start date, update it\n      if (new Date(subTask.start) < new Date(task.start)) {\n        subTask.start = task.start;\n        subTask.end = new Date(new Date(subTask.start).setDate(new Date(task.start).getDate() + subDuration)).toISOString().split('T')[0];\n      }\n      updateTaskDates(subTask, subTaskMap)\n      if (subTask.end > task.end) {\n        task.end = subTask.end\n      }\n    });\n  }\n}\n","import { updateTaskStartEndDates } from \"./updatechart.js\";\nimport GanttChart from \"./gantchart.js\";\n\nconst tooltip = document.createElement('div');\ntooltip.className = 'bar-hover';\ndocument.body.appendChild(tooltip);\nexport function closeModal(modal) {\n    modal.style.display = 'none';\n}\nexport function openAddModal(tasks) {\n    // Create or get the modal element\n    let addModal = document.getElementById('addFormModal');\n    if (!addModal) {\n        addModal = document.createElement('div');\n        addModal.setAttribute('id', 'addFormModal');\n        addModal.setAttribute('class', 'modal')\n        document.body.appendChild(addModal);\n    }\n\n    // Create or get the form element\n    let addTaskForm = document.getElementById('addTaskForm');\n    if (!addTaskForm) {\n        addTaskForm = document.createElement('form');\n        addTaskForm.setAttribute('id', 'addTaskForm');\n        addModal.appendChild(addTaskForm);\n    }\n\n    // Clear existing content in the form\n    addTaskForm.innerHTML = '';\n\n    // Create form elements dynamically and append them to the form\n    createFormField('Task Name:', 'taskName', '', 'text', true, addTaskForm);\n    createFormField('Start Date:', 'startDate', '', 'date', true, addTaskForm);\n    createFormField('End Date:', 'endDate', '', 'date', true, addTaskForm);\n    createFormField('Progress:', 'progress', '', 'number', true, addTaskForm);\n    // Create and append Save Changes button\n    const saveChangesBtn = document.createElement('button');\n    saveChangesBtn.setAttribute('type', 'button');\n    saveChangesBtn.textContent = 'Save Changes';\n    saveChangesBtn.addEventListener('click', function saveChangesHandler() {\n        addTask(tasks);\n    });\n    addTaskForm.appendChild(saveChangesBtn);\n\n    // Create and append Cancel button\n    const cancelBtn = document.createElement('button');\n    cancelBtn.setAttribute('type', 'button');\n    cancelBtn.textContent = 'Cancel';\n    cancelBtn.addEventListener('click', function saveChangesHandler() {\n        closeModal(addModal)\n    });\n    addTaskForm.appendChild(cancelBtn);\n\n    // Display the modal\n    addModal.style.display = 'block';\n\n    // Prevent the contextmenu event from propagating further\n    event.preventDefault();\n}\n//function to update the task array\nexport function addTask(tasks) {\n    const addModal = document.getElementById('addFormModal');\n    const taskName = document.getElementById('taskName').value;\n    const startDate = document.getElementById('startDate').value;\n    const endDate = document.getElementById('endDate').value;\n\n    // Ensure the required fields are not empty\n    if (!taskName || !startDate || !endDate) {\n        alert('Please fill in all fields.');\n        return;\n    }\n\n    const newTask = {\n        id: tasks.length + 1, // Incremental ID\n        name: taskName,\n        start: startDate,\n        end: endDate,\n        progress: 0, // You can set the progress as needed\n        dependencies: [] // You can set dependencies as needed\n    };\n\n    // Add the new task to the existing tasks\n    tasks.push(newTask);\n    length = length + 1; //after adding of each task length should be increased\n    closeModal(addModal);\n    // Call the function with sample data\n    GanttChart.createChart(tasks);\n}\n\n// Function to handle task editing\nexport function editTask(event, task, tasks, allTasks = null) {\n    event.preventDefault();\n    GanttChart.stopDrag();\n\n    // Create or get the modal element\n    let editModal = document.getElementById('editModal');\n    if (!editModal) {\n        editModal = document.createElement('div');\n        editModal.setAttribute('id', 'editModal');\n        editModal.setAttribute('class', 'modal')\n        document.body.appendChild(editModal);\n    }\n\n    // Create or get the form element\n    let editTaskForm = document.getElementById('editTaskForm');\n    if (!editTaskForm) {\n        editTaskForm = document.createElement('form');\n        editTaskForm.setAttribute('id', 'editTaskForm');\n        editModal.appendChild(editTaskForm);\n    }\n\n    // Clear existing content in the form\n    editTaskForm.innerHTML = '';\n\n    // Create form elements dynamically and append them to the form\n    createFormField('Task Name:', 'editTaskName', task.name, 'text', true, editTaskForm);\n    createFormField('Start Date:', 'editStartDate', task.start, 'date', true, editTaskForm);\n    createFormField('End Date:', 'editEndDate', task.end, 'date', true, editTaskForm);\n    createFormField('Progress:', 'editProgress', task.progress, 'number', true, editTaskForm);\n\n    // Clear existing options\n    const editDependenciesSelect = document.createElement('select');\n    editDependenciesSelect.setAttribute('id', 'editDependencies');\n    editDependenciesSelect.setAttribute('multiple', 'multiple'); // Set the multiple attribute\n    editTaskForm.appendChild(editDependenciesSelect);\n\n    // Display dependencies in the modal as select options\n    tasks.forEach(availableTask => {\n        // Check if the available task is not the current task and not dependent on the current task\n        if (availableTask.id !== task.id && !isTaskDependent(task, availableTask, tasks)) {\n            const option = document.createElement('option');\n            option.value = availableTask.id;\n            option.textContent = availableTask.name;\n            if (task.dependencies.includes(availableTask.id)) {\n                // If the task is already a dependency, mark it as selected\n                option.selected = true;\n            }\n            editDependenciesSelect.appendChild(option);\n        }\n    });\n\n    // Store the task ID in a data attribute of the form\n    editTaskForm.setAttribute('data-task-id', task.id);\n\n    // Create and append Save Changes button\n    const saveChangesBtn = document.createElement('button');\n    saveChangesBtn.setAttribute('type', 'button');\n    saveChangesBtn.textContent = 'Save Changes';\n    saveChangesBtn.addEventListener('click', function saveChangesHandler() {\n        // Call your function to save the edited task data\n        saveEditedTask(tasks, allTasks);\n        // Close the modal after saving changes\n        closeModal(editModal);\n    });\n    editTaskForm.appendChild(saveChangesBtn);\n\n    // Create and append Cancel button\n    const cancelBtn = document.createElement('button');\n    cancelBtn.setAttribute('type', 'button');\n    cancelBtn.textContent = 'Cancel';\n    cancelBtn.addEventListener('click', function saveChangesHandler() {\n        closeModal(editModal);\n    });\n    editTaskForm.appendChild(cancelBtn);\n\n    // Display the modal\n    editModal.style.display = 'block';\n\n    // Prevent the contextmenu event from propagating further\n    event.preventDefault();\n}\n\nfunction createFormField(labelText, inputId, inputValue, inputType, required, parentName) {\n    const label = document.createElement('label');\n    label.setAttribute('for', inputId);\n    label.textContent = labelText;\n\n    const input = document.createElement('input');\n    input.setAttribute('type', inputType);\n    input.setAttribute('id', inputId);\n    input.setAttribute('name', inputId);\n    input.value = inputValue;\n    input.required = required;\n\n    // Append label and input to the form\n    parentName.appendChild(label);\n    parentName.appendChild(input);\n}\n\n\n\n// Function to check if a task is dependent on another task\nexport function isTaskDependent(currentTask, otherTask, allTasks) {\n    return otherTask.dependencies.includes(currentTask.id) || otherTask.dependencies.some(depId => isTaskDependent(currentTask, allTasks[depId - 1], allTasks));\n}\n\n// Function to save edited task\nexport function saveEditedTask(tasks, alltasks = null) {\n    const editTaskForm = document.getElementById('editTaskForm');\n    const editTaskNameInput = document.getElementById('editTaskName');\n    const editStartDateInput = document.getElementById('editStartDate');\n    const editEndDateInput = document.getElementById('editEndDate');\n    const editProgress = document.getElementById('editProgress');\n    const editDependenciesSelect = document.getElementById('editDependencies');\n\n    // Retrieve the edited values\n    const editedTaskName = editTaskNameInput.value;\n    const editedStartDate = editStartDateInput.value;\n    const editedEndDate = editEndDateInput.value;\n    const progress = editProgress.value;\n    // Retrieve the task ID from the data attribute\n    const taskId = parseInt(editTaskForm.getAttribute('data-task-id'), 10);\n\n    // Retrieve the selected dependencies from the updated select element\n    const selectedDependencies = Array.from(editDependenciesSelect.selectedOptions).map(option => parseInt(option.value, 10));\n\n    // Find the task in the array and update its properties\n    const editedTaskIndex = tasks.findIndex(task => task.id === taskId);\n    if (editedTaskIndex !== -1) {\n        tasks[editedTaskIndex].name = editedTaskName;\n        tasks[editedTaskIndex].start = editedStartDate;\n        tasks[editedTaskIndex].end = editedEndDate;\n        tasks[editedTaskIndex].progress = progress > 100 ? 100 : progress;\n        tasks[editedTaskIndex].dependencies = selectedDependencies;\n    }\n\n    // Update the Gantt chart with the new data\n    updateTaskStartEndDates(tasks);\n    // Call the function with sample data\n    if (alltasks) {\n        GanttChart.createChart(alltasks);\n    }\n    else {\n        GanttChart.createChart(tasks);\n    }\n}\n\nexport function showTaskDetails(task, allTasks) {\n    const dependentTaskNames = task.dependencies.map(depId => allTasks[depId - 1].name);\n    const dependentTaskInfo = dependentTaskNames.length > 0 ? `Dependencies: ${dependentTaskNames.join(', ')}` : '';\n\n    tooltip.innerHTML = `\n    Task: ${task.name}<br>\n    Start: ${task.start}<br>\n    End: ${task.end}<br>\n    ${dependentTaskInfo}\n    `;\n    tooltip.style.left = `${event.pageX}px`;\n    tooltip.style.top = `${event.pageY}px`;\n    tooltip.style.display = 'block';\n}\n\nexport function hideTaskDetails() {\n    tooltip.style.display = 'none';\n}","import { createGridLines, createMonthHeadings ,createDateScale, createDivDateScale } from './date-utl.js';\nimport { updateTaskStartEndDates } from './updatechart.js';\nimport { hideTaskDetails, showTaskDetails, editTask, openAddModal, addTask } from './saveEdit.js';\n\nconst svgNS = 'http://www.w3.org/2000/svg';\nexport default class GanttChart {\n  constructor() {\n    this.dateInfo;\n    this.taskCount;\n    this.isDragging = false;\n    this.initialX;\n    this.initialWidth;\n    this.isDragStart;\n    // Variables to store the current task and progress bar\n    this.currentTaskRect;\n    this.currentProgressRect;\n    this.dragMoveListener = null;\n    this.length;\n    this.dependentTask;\n    this.tasks;\n    this.allTask;\n    this.chartWidth;\n  }\n\n  getTotalLength(tasks) {\n    return tasks.reduce((total, task) => {\n      return total + 1 + (task.subTask ? this.getTotalLength(task.subTask) : 0);\n    }, 0);\n  }\n  createButton(tasks) {\n    const button = document.createElement('button');\n    button.setAttribute('class', 'top-place add-button')\n    button.textContent = 'Add Task'; // Set the button text\n    button.addEventListener('click', () => {\n      openAddModal(tasks);\n    });\n    return button;\n  }\n\n  createGanttChart(tasks) {\n    updateTaskStartEndDates(tasks);\n    const chartContainer = document.getElementById('chart');\n    // Create a button element\n    const button = this.createButton(tasks)\n    let svg = chartContainer.querySelector('svg');\n    // Check if the SVG element already exists\n    if (!svg) {\n      // Append the button to the parent container of the SVG\n      chartContainer.appendChild(button);\n      // If not, create a new SVG element\n      svg = this.createSVG(tasks);\n      chartContainer.appendChild(svg);\n      const Datediv = createDivDateScale(this.dateInfo, this.chartWidth, this.length);\n      chartContainer.insertBefore(Datediv,svg);\n      console.log(Datediv);\n      \n    } else {\n      this.updateGanttChartContent(svg, tasks);\n    }\n  }\n\n  createSVG(tasks) {\n    const svg = document.createElementNS(svgNS, 'svg');\n    svg.setAttribute('id', 'mySvg');\n    svg.setAttribute('min-width', '100%');\n    svg.setAttribute('height', '200%');\n    const dateGroup = document.createElementNS(svgNS, 'g'); // Create a group element for the task\n    dateGroup.setAttribute('class', 'date-groups');\n    svg.appendChild(dateGroup);\n    this.dateInfo = this.calculateDateInfo(tasks);\n    const chartWidth = this.calculateChartWidth(this.dateInfo);\n    this.length = this.getTotalLength(tasks);\n\n    svg.setAttribute('viewBox', `0 0 ${chartWidth} ${this.length * 40 + 40}`);\n\n    createGridLines(dateGroup, chartWidth, this.length);\n    createMonthHeadings(dateGroup, this.dateInfo, chartWidth);\n    createDateScale(dateGroup, this.dateInfo, chartWidth, this.length);\n    this.createTaskBars(svg, tasks, this.dateInfo);\n    setTimeout(() => {\n      this.drawDependencyLine(svg, tasks);\n    }, 0);\n    return svg;\n  }\n\n  calculateDateInfo(tasks) {\n    const startDates = tasks.map(task => new Date(task.start));\n    const endDates = tasks.map(task => new Date(task.end));\n\n    const minDate = new Date(Math.min(...startDates));\n    const startingDate = new Date(minDate);\n    startingDate.setDate(minDate.getDate() - 5);\n\n    const maxDate = new Date(Math.max(...endDates));\n    const dateDiff = (maxDate - minDate) / (24 * 60 * 60 * 1000);\n\n    let multiplier = dateDiff > 100 ? 54 : dateDiff > 30 ? 60 : 120;\n\n    return { startingDate, maxDate, multiplier };\n  }\n\n  calculateChartWidth(dateInfo) {\n    this.chartWidth = (dateInfo.maxDate - dateInfo.startingDate) / (24 * 60 * 60 * 1000) * dateInfo.multiplier;\n    return this.chartWidth;\n  }\n\n  createTaskBars(svg, tasks, dateInfo) {\n    let customIndex = 0;\n\n    tasks.forEach((task, index) => {\n      const taskGroup = document.createElementNS(svgNS, 'g'); // Create a group element for the task\n      taskGroup.setAttribute('class', 'tasks');\n      svg.appendChild(taskGroup);\n\n      const dependentTaskEnd = Math.max(...task.dependencies.map(depId => new Date(tasks[depId - 1].end)));\n      const startOffset = Math.max((dependentTaskEnd - dateInfo.startingDate) / (24 * 60 * 60 * 1000) * 50, (new Date(task.start) - dateInfo.startingDate) / (24 * 60 * 60 * 1000) * 50);\n      const duration = (new Date(task.end) - new Date(task.start)) / (24 * 60 * 60 * 1000) * 50;\n\n      const rect = document.createElementNS(svgNS, 'rect');\n      rect.setAttribute('x', startOffset);\n      rect.setAttribute('y', customIndex * 40 + 40);\n      rect.setAttribute('width', duration);\n      rect.setAttribute('height', 30);\n      rect.setAttribute('fill', '#3498db');\n      rect.setAttribute('id', `task-${task.id}`); // Set the id attribute\n      taskGroup.appendChild(rect);\n\n      const progressWidth = (duration * task.progress) / 100;\n      const progressRect = document.createElementNS(svgNS, 'rect');\n      progressRect.setAttribute('x', startOffset);\n      progressRect.setAttribute('y', customIndex * 40 + 40);\n      progressRect.setAttribute('width', progressWidth);\n      progressRect.setAttribute('height', 30);\n      progressRect.setAttribute('fill', '#2ecc71');\n      taskGroup.appendChild(progressRect);\n\n      const text = document.createElementNS(svgNS, 'text');\n      text.setAttribute('x', startOffset + 5);\n      text.setAttribute('y', customIndex * 40 + 60);\n      text.textContent = task.name;\n      taskGroup.appendChild(text);\n\n      // Render subtasks\n      if (task.subTask && task.subTask.length > 0) {\n        const subTaskGroup = document.createElementNS(svgNS, 'g'); // Create a group element for the task\n        subTaskGroup.setAttribute('class', 'subtask')\n        taskGroup.appendChild(subTaskGroup);\n        task.subTask.forEach((subtask, subIndex) => {\n          const subDependentTaskEnd = Math.max(...subtask.dependencies.map(depId => new Date(task.subTask[depId - 1].end)));\n          const subStartOffset = Math.max((subDependentTaskEnd - dateInfo.startingDate) / (24 * 60 * 60 * 1000) * 50, (new Date(subtask.start) - dateInfo.startingDate) / (24 * 60 * 60 * 1000) * 50);\n          const subDuration = (new Date(subtask.end) - new Date(subtask.start)) / (24 * 60 * 60 * 1000) * 50;\n\n          const subRect = document.createElementNS(svgNS, 'rect');\n          subRect.setAttribute('class', 'subtask')\n          subRect.setAttribute('x', subStartOffset);\n          subRect.setAttribute('y', (subIndex + customIndex + 1) * 40 + 40);\n          subRect.setAttribute('width', subDuration);\n          subRect.setAttribute('height', 15);\n          subRect.setAttribute('fill', '#e74c3c');\n          subRect.setAttribute('id', `subtask-${task.id}-${subtask.id}`); // Set the id attribute for subtasks\n          subTaskGroup.appendChild(subRect);\n\n          const subProgressWidth = (subDuration * subtask.progress) / 100;\n          const subProgressRect = document.createElementNS(svgNS, 'rect');\n          subProgressRect.setAttribute('class', 'subtask-progress')\n          subProgressRect.setAttribute('x', subStartOffset);\n          subProgressRect.setAttribute('y', (subIndex + customIndex + 1) * 40 + 40);\n          subProgressRect.setAttribute('width', subProgressWidth);\n          subProgressRect.setAttribute('height', 15);\n          subProgressRect.setAttribute('fill', '#c0392b');\n          subTaskGroup.appendChild(subProgressRect);\n\n          const subText = document.createElementNS(svgNS, 'text');\n          subText.setAttribute('x', subStartOffset + 5);\n          subText.setAttribute('y', (subIndex + customIndex + 1) * 40 + 50);\n          subText.textContent = subtask.name;\n          subText.setAttribute('font-size', '10px');\n          subTaskGroup.appendChild(subText);\n\n          subText.addEventListener('mouseover', () => showTaskDetails(subtask, task.subTask));\n          subRect.addEventListener('mouseover', () => showTaskDetails(subtask, task.subTask));\n          subRect.addEventListener('mouseout', hideTaskDetails);\n\n          subProgressRect.addEventListener('mouseover', () => showTaskDetails(subtask, task.subTask));\n          subProgressRect.addEventListener('mouseout', hideTaskDetails);\n\n          subRect.addEventListener('contextmenu', (event) => {\n            event.preventDefault();\n            editTask(event, subtask, task.subTask, tasks);\n          });\n          subProgressRect.addEventListener('contextmenu', (event) => {\n            event.preventDefault();\n            editTask(event, subtask, task.subTask, tasks);\n          });\n          subText.addEventListener('contextmenu', (event) => {\n            event.preventDefault();\n            editTask(event, subtask, task.subTask, tasks);\n          });\n          subRect.addEventListener('mousedown', (event) => {\n            event.preventDefault();\n            this.startDrag(event, subRect, subProgressRect, subtask, task.subTask, tasks);\n          });\n          subProgressRect.addEventListener('mousedown', (event) => {\n            event.preventDefault();\n            this.startDrag(event, subRect, subProgressRect, subtask, task.subTask, tasks)\n          });\n          subText.addEventListener('mousedown', (event) => {\n            event.preventDefault();\n            this.startDrag(event, subRect, subProgressRect, subtask, task.subTask, tasks);\n          });\n        });\n      }\n\n      // Add event listeners for both rectangle and progress bar\n      text.addEventListener('mouseover', () => showTaskDetails(task, tasks));\n      rect.addEventListener('mouseover', () => showTaskDetails(task, tasks));\n      rect.addEventListener('mouseout', hideTaskDetails);\n\n      progressRect.addEventListener('mouseover', () => showTaskDetails(task, tasks));\n      progressRect.addEventListener('mouseout', hideTaskDetails);\n\n      rect.addEventListener('contextmenu', (event) => {\n        event.preventDefault();\n        editTask(event, task, tasks);\n      });\n      progressRect.addEventListener('contextmenu', (event) => {\n        event.preventDefault();\n        editTask(event, task, tasks);\n      });\n      text.addEventListener('contextmenu', (event) => {\n        event.preventDefault();\n        editTask(event, task, tasks);\n      });\n      // Add event listeners for dragging to edit start and end dates\n      rect.addEventListener('mousedown', (event) => {\n        event.preventDefault();\n        this.startDrag(event, rect, progressRect, task, tasks);\n      });\n      progressRect.addEventListener('mousedown', (event) => {\n        event.preventDefault();\n        this.startDrag(event, rect, progressRect, task, tasks)\n      });\n      text.addEventListener('mousedown', (event) => {\n        event.preventDefault();\n        this.startDrag(event, rect, progressRect, task, tasks);\n      });\n      document.addEventListener('mouseup', (event) => {\n        this.handleMouseUp(this.taskRect, this.dependentTask, this.tasks, this.dateInfo, this.allTasks);\n      });\n      // task below the subtask\n      customIndex = customIndex + 1;\n      if (task.subTask && task.subTask.length > 0) {\n        customIndex = customIndex + task.subTask.length;\n      }\n    });\n  }\n\n  throttle(func, limit) {\n    let inThrottle;\n    return function () {\n      const args = arguments;\n      const context = this;\n      if (!inThrottle) {\n        func.apply(context, args);\n        inThrottle = true;\n        setTimeout(() => (inThrottle = false), limit);\n      }\n    };\n  }\n\n  isExceedingDepenentEndDate(sartDate, dependentTask, tasks) {\n    const tasksWithDesiredIds = tasks.filter(task =>\n      dependentTask.dependencies.includes(task.id)\n    );\n    const endDates = tasksWithDesiredIds.map(task => new Date(task.end));\n    const maxDate = new Date(Math.max(...endDates))\n    if (maxDate > sartDate) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n  handleDragMove(event, taskRect, progress, dependentTask, tasks, allTasks = null) {\n    event.preventDefault();\n    if (this.isDragging) {\n      this.updateTaskBarPosition(event.clientX, taskRect, progress, dependentTask, tasks, allTasks);\n    }\n  }\n\n  startDrag(event, taskRect, taskProgressRect, dependentTask, task, allTasks = null) {\n    this.dependentTask = dependentTask;\n    this.tasks = task;\n    this.allTasks = allTasks;\n    document.body.classList.add('dragging');\n    hideTaskDetails\n    this.isDragging = true;\n    this.initialX = event.clientX;\n    this.initialWidth = parseFloat(taskRect.getAttribute('width'));\n    this.isDragStart = event.clientX < taskRect.getBoundingClientRect().left + this.initialWidth / 2;\n\n    // Set the current task and progress bar\n    this.currentTaskRect = taskRect;\n    this.currentProgressRect = taskProgressRect;\n    this.dragMoveListener = this.throttle((event) => {\n      this.handleDragMove(event, this.currentTaskRect, this.currentProgressRect, dependentTask, task, allTasks);\n    }, 16);\n    event.preventDefault();\n    document.addEventListener('mousemove', this.dragMoveListener);\n\n  }\n\n  updateTaskBarPosition(clientX, taskRect, progress, dependentTask, tasks, allTasks) {\n    const width = this.getWidth()\n    const deltaX = (clientX - this.initialX) /(width/this.chartWidth)// Adjust the sensitivity factor \n    if (this.isDragStart) {\n      // Dragging start handle\n      const newStartOffset = (new Date(dependentTask.start) - this.dateInfo.startingDate) / (24 * 60 * 60 * 1000) * 50 + deltaX;\n      const startDate = new Date(this.dateInfo.startingDate.getTime() + (parseFloat(taskRect.getAttribute('x'))) / 50 * (24 * 60 * 60 * 1000));\n\n      if (this.isExceedingDepenentEndDate(startDate, dependentTask, tasks)) {\n        alert('Start Date has exceeded its dependent EndDate');\n        document.body.classList.remove('dragging');\n        this.isDragging = false;\n        const updatedTaskIndex = tasks.findIndex(t => t.id === dependentTask.id);\n        if (updatedTaskIndex !== -1) {\n          const newEndDate = new Date(startDate.getTime() + (parseFloat(taskRect.getAttribute('width')) / 51) * (24 * 60 * 60 * 1000));\n\n          // Update the properties of the task in the array\n          tasks[updatedTaskIndex].start = startDate.toISOString().split('T')[0];\n          tasks[updatedTaskIndex].end = newEndDate.toISOString().split('T')[0];\n          document.removeEventListener('mousemove', this.dragMoveListener)\n          // Update the Gantt chart with the new data\n          updateTaskStartEndDates(tasks);\n          if (allTasks) {\n            this.createGanttChart(allTasks);\n          }\n          else {\n            this.createGanttChart(tasks);\n          }\n        }\n      }\n\n      // const endDate = new Date(dateInfo.startingDate.getTime() + (parseFloat(taskRect.getAttribute('x')) + parseFloat(taskRect.getAttribute('width'))) / 50 * (24 * 60 * 60 * 1000));\n\n      const maxStartOffset = parseFloat(taskRect.getAttribute('x')) + parseFloat(taskRect.getAttribute('width'));\n      const adjustedStartOffset = Math.min(newStartOffset, maxStartOffset);\n      const adjustedWidth = maxStartOffset - adjustedStartOffset;\n      taskRect.setAttribute('x', newStartOffset);\n      taskRect.setAttribute('width', adjustedWidth);\n\n      progress.setAttribute('x', newStartOffset);\n      progress.setAttribute('width', adjustedWidth * dependentTask.progress / 100);\n\n    } else {\n      // Dragging end handle\n      const newWidth = this.initialWidth + deltaX;\n      taskRect.setAttribute('width', newWidth);\n      progress.setAttribute('width', newWidth * dependentTask.progress / 100);\n    }\n    this.taskRect = taskRect;\n  }\n\n  handleMouseUp(taskRect, dependentTask, tasks, dateInfo, allTasks = null) {\n    document.body.classList.remove('dragging');\n    document.removeEventListener('mousemove', this.dragMoveListener)\n    if (this.isDragging) {\n      this.isDragging = false\n      // Find the task in the array and update its properties\n      const updatedTaskIndex = tasks.findIndex((t) => t.id === dependentTask.id);\n      if (updatedTaskIndex !== -1) {\n        const newStartDate = new Date(\n          dateInfo.startingDate.getTime() +\n          (parseFloat(taskRect.getAttribute('x')) / 50) * (24 * 60 * 60 * 1000)\n        );\n        const newEndDate = new Date(\n          newStartDate.getTime() +\n          (parseFloat(taskRect.getAttribute('width')) / 50) * (24 * 60 * 60 * 1000)\n        );\n        // Update the properties of the task in the array\n        tasks[updatedTaskIndex].start = newStartDate.toISOString().split('T')[0];\n        tasks[updatedTaskIndex].end = newEndDate.toISOString().split('T')[0];\n        // Update the Gantt chart with the new data\n        updateTaskStartEndDates(tasks);\n        if (allTasks) {\n          this.createGanttChart(allTasks);\n        } else {\n          this.createGanttChart(tasks);\n        }\n\n      }\n    }\n\n  }\n\n  updateGanttChartContent(svg, tasks) {\n    const chartContainer = document.getElementById('chart');\n    //clear the excisting date div\n    let Datediv = document.getElementById('div-date');\n    chartContainer.removeChild(Datediv);\n    // Clear existing content\n    while (svg.firstChild) {\n      svg.removeChild(svg.firstChild);\n    }\n    this.length = this.getTotalLength(tasks)\n    // Update the content with the new tasks\n    this.dateInfo = this.calculateDateInfo(tasks);\n    const chartWidth = this.calculateChartWidth(this.dateInfo);\n    const dateGroup = document.createElementNS(svgNS, 'g'); // Create a group element for the task\n    dateGroup.setAttribute('class', 'date-groups');\n    svg.appendChild(dateGroup);\n\n    svg.setAttribute('viewBox', `0 0 ${chartWidth} ${this.length * 40 + 40}`);\n\n    createGridLines(dateGroup, chartWidth, this.length);\n    createMonthHeadings(dateGroup, this.dateInfo, chartWidth);\n    createDateScale(dateGroup, this.dateInfo, chartWidth, this.length);\n    Datediv = createDivDateScale(this.dateInfo, this.chartWidth, this.length);\n    chartContainer.insertBefore(Datediv,svg);\n    this.createTaskBars(svg, tasks, this.dateInfo);\n    this.drawDependencyLine(svg, tasks)\n  }\n  drawDependencyLine(svg, tasks) {\n    tasks.forEach((task, index) => {\n      if (task.dependencies && task.dependencies.length > 0) {\n        task.dependencies.forEach((dependencyId) => {\n          const dependentTask = tasks.find((t) => t.id === dependencyId);\n          if (dependentTask) {\n\n            const svgNS = 'http://www.w3.org/2000/svg';\n\n            const startTaskElement = document.getElementById(`task-${dependentTask.id}`);\n            const endTaskElement = document.getElementById(`task-${task.id}`);\n\n            if (startTaskElement && endTaskElement) {\n              const startOffset = parseFloat(startTaskElement.getAttribute('width')) + parseFloat(startTaskElement.getAttribute('x'));\n              const x1 = startOffset;\n\n              const y1 = parseFloat(startTaskElement.getAttribute('y'));\n\n              const x2 = parseFloat(endTaskElement.getAttribute('x')) + parseFloat(endTaskElement.getAttribute('width')) / 2;\n\n              // Draw horizontal line\n              const lineHorizontal = document.createElementNS(svgNS, 'line');\n              lineHorizontal.setAttribute('x1', x1);\n              lineHorizontal.setAttribute('y1', y1 + parseFloat(endTaskElement.getAttribute('height')) / 2);\n              lineHorizontal.setAttribute('x2', x2);\n              lineHorizontal.setAttribute('y2', y1 + parseFloat(endTaskElement.getAttribute('height')) / 2);\n              lineHorizontal.classList.add('dependency-line');\n              svg.appendChild(lineHorizontal);\n\n              // Draw vertical line\n              const lineVertical = document.createElementNS(svgNS, 'line');\n              lineVertical.setAttribute('x1', x2);\n              lineVertical.setAttribute('y1', y1 + parseFloat(endTaskElement.getAttribute('height')) / 2);\n              lineVertical.setAttribute('x2', x2);\n              lineVertical.setAttribute('y2', parseFloat(endTaskElement.getAttribute('y'))); // Adjust as needed\n              lineVertical.classList.add('dependency-line');\n              svg.appendChild(lineVertical);\n\n              // Draw arrowhead\n              const arrowhead = document.createElementNS(svgNS, 'polygon');\n              const arrowheadSize = 5;\n              arrowhead.setAttribute('points', `${x2},${parseFloat(endTaskElement.getAttribute('y')) - arrowheadSize} ${x2 - arrowheadSize},${parseFloat(endTaskElement.getAttribute('y')) - arrowheadSize} ${x2},${parseFloat(endTaskElement.getAttribute('y'))} ${x2 + arrowheadSize},${parseFloat(endTaskElement.getAttribute('y')) - arrowheadSize}`);\n              arrowhead.classList.add('dependency-arrowhead');\n              svg.appendChild(arrowhead);\n\n            }\n          }\n        });\n      }\n      if (task.subTask) {\n        task.subTask.forEach((subtask, subindex) => {\n          if (subtask.dependencies && subtask.dependencies.length > 0) {\n            subtask.dependencies.forEach((dependencyId) => {\n              const dependentTask = task.subTask.find((t) => t.id === dependencyId);\n              if (dependentTask) {\n\n                const svgNS = 'http://www.w3.org/2000/svg';\n\n                const startTaskElement = document.getElementById(`subtask-${task.id}-${dependentTask.id}`);\n                const endTaskElement = document.getElementById(`subtask-${task.id}-${subtask.id}`);\n\n                if (startTaskElement && endTaskElement) {\n                  const startOffset = parseFloat(startTaskElement.getAttribute('width')) + parseFloat(startTaskElement.getAttribute('x'));\n                  const x1 = startOffset;\n\n                  const y1 = parseFloat(startTaskElement.getAttribute('y'));\n\n                  const x2 = parseFloat(endTaskElement.getAttribute('x')) + parseFloat(endTaskElement.getAttribute('width')) / 2;\n\n                  // Draw horizontal line\n                  const lineHorizontal = document.createElementNS(svgNS, 'line');\n                  lineHorizontal.setAttribute('x1', x1);\n                  lineHorizontal.setAttribute('y1', y1 + parseFloat(endTaskElement.getAttribute('height')) / 2);\n                  lineHorizontal.setAttribute('x2', x2);\n                  lineHorizontal.setAttribute('y2', y1 + parseFloat(endTaskElement.getAttribute('height')) / 2);\n                  lineHorizontal.classList.add('dependency-line');\n                  svg.appendChild(lineHorizontal);\n\n                  // Draw vertical line\n                  const lineVertical = document.createElementNS(svgNS, 'line');\n                  lineVertical.setAttribute('x1', x2);\n                  lineVertical.setAttribute('y1', y1 + parseFloat(endTaskElement.getAttribute('height')) / 2);\n                  lineVertical.setAttribute('x2', x2);\n                  lineVertical.setAttribute('y2', parseFloat(endTaskElement.getAttribute('y'))); // Adjust as needed\n                  lineVertical.classList.add('dependency-line');\n                  svg.appendChild(lineVertical);\n\n                  // Draw arrowhead\n                  const arrowhead = document.createElementNS(svgNS, 'polygon');\n                  const arrowheadSize = 5;\n                  arrowhead.setAttribute('points', `${x2},${parseFloat(endTaskElement.getAttribute('y')) - arrowheadSize} ${x2 - arrowheadSize},${parseFloat(endTaskElement.getAttribute('y')) - arrowheadSize} ${x2},${parseFloat(endTaskElement.getAttribute('y'))} ${x2 + arrowheadSize},${parseFloat(endTaskElement.getAttribute('y')) - arrowheadSize}`);\n                  arrowhead.classList.add('dependency-arrowhead');\n                  svg.appendChild(arrowhead);\n\n                }\n              }\n            });\n          }\n        })\n      }\n    });\n  }\n  getWidth() {\n    var svgElement = document.getElementById('mySvg');\n\n    if (svgElement) {\n        var svgWidthInPixels = window.getComputedStyle(svgElement).width;\n        var numericWidth = parseFloat(svgWidthInPixels);\n        return numericWidth;\n    } else {\n        return null;\n    }\n  }\n  static returnWidth(){\n    const width = new GanttChart();\n    return width.getWidth();\n  }\n  static createChart(tasks) {\n    const ganttChart = new GanttChart();\n    ganttChart.createGanttChart(tasks);\n  }\n\n  static stopDrag() {\n    // Remove the event listener when the dragging stops\n    document.removeEventListener('mousemove', this.dragMoveListener);\n  }\n}"],"names":["svgNS","createGridLines","dateGroup","chartWidth","taskCount","gridLines","document","createElementNS","classList","add","appendChild","i","line","setAttribute","createMonthHeadings","dateInfo","month","months","currentMonth","monthIndex","Date","startingDate","getTime","getMonth","monthHeading","textContent","createDateScale","date","dateScale","daysOfWeek","currentDate","day","getDay","createDivDateScale","dateDiv","createElement","width","GanttChart","returnWidth","getDate","console","log","updateTaskStartEndDates","tasks","taskMap","Map","map","task","id","forEach","updateTaskDates","subTask","length","subTaskMap","subtask","subDuration","end","start","setDate","toISOString","split","updateSubTaskStartEndDate","dependencies","dependentTasks","depId","get","maxEndDate","Math","max","depTask","dependentTask","duration","tooltip","closeModal","modal","style","display","openAddModal","addModal","getElementById","body","addTaskForm","innerHTML","createFormField","saveChangesBtn","addEventListener","taskName","value","startDate","endDate","alert","newTask","name","progress","push","createChart","addTask","cancelBtn","event","preventDefault","editTask","allTasks","stopDrag","editModal","editTaskForm","editDependenciesSelect","availableTask","isTaskDependent","option","includes","selected","alltasks","editTaskNameInput","editStartDateInput","editEndDateInput","editProgress","editedTaskName","editedStartDate","editedEndDate","taskId","parseInt","getAttribute","selectedDependencies","Array","from","selectedOptions","editedTaskIndex","findIndex","saveEditedTask","labelText","inputId","inputValue","inputType","required","parentName","label","input","currentTask","otherTask","some","showTaskDetails","dependentTaskNames","dependentTaskInfo","join","left","pageX","top","pageY","hideTaskDetails","className","constructor","this","isDragging","initialX","initialWidth","isDragStart","currentTaskRect","currentProgressRect","dragMoveListener","allTask","getTotalLength","reduce","total","createButton","button","createGanttChart","chartContainer","svg","querySelector","updateGanttChartContent","createSVG","Datediv","insertBefore","calculateDateInfo","calculateChartWidth","createTaskBars","setTimeout","drawDependencyLine","startDates","endDates","minDate","min","maxDate","dateDiff","multiplier","customIndex","index","taskGroup","dependentTaskEnd","startOffset","rect","progressWidth","progressRect","text","subTaskGroup","subIndex","subDependentTaskEnd","subStartOffset","subRect","subProgressWidth","subProgressRect","subText","startDrag","handleMouseUp","taskRect","throttle","func","limit","inThrottle","args","arguments","context","apply","isExceedingDepenentEndDate","sartDate","filter","handleDragMove","updateTaskBarPosition","clientX","taskProgressRect","parseFloat","getBoundingClientRect","getWidth","deltaX","newStartOffset","remove","updatedTaskIndex","t","newEndDate","removeEventListener","maxStartOffset","adjustedWidth","newWidth","newStartDate","removeChild","firstChild","dependencyId","find","startTaskElement","endTaskElement","x1","y1","x2","lineHorizontal","lineVertical","arrowhead","arrowheadSize","subindex","svgElement","svgWidthInPixels","window","getComputedStyle"],"mappings":"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"}