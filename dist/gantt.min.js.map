{"version":3,"file":"gantt.min.js","sources":["../js/date-utl.js","../js/updatechart.js","../js/saveEdit.js","../js/gantchart.js"],"sourcesContent":["const svgNS = 'http://www.w3.org/2000/svg';\n\nexport function createGridLines(dateGroup, chartWidth, taskCount) {\n    const gridLines = document.createElementNS(svgNS, 'g');\n    gridLines.classList.add('lines')\n    dateGroup.appendChild(gridLines)\n    for (let i = 0; i <= chartWidth; i += 50) {\n        const line = document.createElementNS(svgNS, 'line');\n        line.setAttribute('x1', i);\n        line.setAttribute('x2', i);\n        line.setAttribute('y1', 35);\n        line.setAttribute('y2', taskCount * 40 + 40);\n        line.classList.add('grid-line');\n        gridLines.appendChild(line);\n    }\n}\n\nexport function createMonthHeadings(dateGroup, dateInfo, chartWidth) {\n    const month = document.createElementNS(svgNS, 'g');\n    month.classList.add('month')\n    dateGroup.appendChild(month)\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    let currentMonth = -1;\n\n    for (let i = 0; i <= chartWidth; i += 50) {\n        const currentDate = new Date(dateInfo.startingDate.getTime() + i / 50 * (24 * 60 * 60 * 1000));\n        const monthIndex = currentDate.getMonth();\n        if (monthIndex !== currentMonth) {\n        currentMonth = monthIndex;\n\n        const monthHeading = document.createElementNS(svgNS, 'text');\n        monthHeading.setAttribute('x', i);\n        monthHeading.setAttribute('y', 15);\n        monthHeading.classList.add('month-heading');\n        monthHeading.textContent = months[currentMonth];\n        month.appendChild(monthHeading);\n        }\n    }\n}\n\nexport function createDateScale(dateGroup, dateInfo, chartWidth, taskCount) {\n    const date = document.createElementNS(svgNS,'g')\n    dateGroup.appendChild(date)\n    date.classList.add('date')\n    const dateScale = document.createElementNS(svgNS, 'text');\n    dateScale.setAttribute('x', '0');\n    dateScale.setAttribute('y', taskCount);\n    date.appendChild(dateScale);\n\n    for (let i = 0; i <= chartWidth; i += 50) {\n        const currentDate = new Date(dateInfo.startingDate.getTime() + i / 50 * (24 * 60 * 60 * 1000));\n        const text = document.createElementNS(svgNS, 'text');\n        text.setAttribute('x', i - 3);\n        text.setAttribute('y', taskCount + 25);\n        text.textContent = currentDate.getDate();\n        date.appendChild(text);\n    }\n}\n","export const updateTaskStartEndDates =(tasks)=> {\n  const taskMap = new Map(tasks.map(task => [task.id, task]));\n\n  tasks.forEach(task => {\n    updateTaskDates(task, taskMap);\n    updateSubTaskStartEndDate(task);\n  });\n\n}\nfunction updateTaskDates(task, taskMap) {\n  if (task.dependencies.length === 0) {\n    return; // Base case: no dependencies, nothing to update\n  }\n\n  const dependentTasks = task.dependencies.map(depId => taskMap.get(depId));\n\n  // Find the maximum end date among dependent tasks\n  const maxEndDate = new Date(Math.max(...dependentTasks.map(depTask => new Date(depTask.end))));\n\n  dependentTasks.forEach(dependentTask => {\n    updateTaskDates(dependentTask, taskMap);\n\n    // Calculate the duration of the task\n    const duration = (new Date(task.end) - new Date(task.start)) / (24 * 60 * 60 * 1000);\n\n    // Check if the start date of the dependent task is after the max end date\n    if (new Date(task.start) < maxEndDate) {\n      // Update the start date of the current task based on the maximum end date of dependent tasks\n      task.start = maxEndDate.toISOString().split('T')[0];\n\n      // Update the end date of the current task based on its duration\n      task.end = new Date(new Date(task.start).setDate(new Date(task.start).getDate() + duration)).toISOString().split('T')[0];\n    }\n  });\n  \n}\n\nfunction updateSubTaskStartEndDate(task)\n{\n   // Check if the task has subtasks\n   if (task.subTask && task.subTask.length > 0) {\n    const subTaskMap=new Map(task.subTask.map(subtask => [subtask.id, subtask]));\n    task.subTask.forEach(subTask => {\n      const subDuration = (new Date(subTask.end) - new Date(subTask.start)) / (24 * 60 * 60 * 1000);\n      // Example condition: If subtask start date is less than task start date, update it\n      if (new Date(subTask.start) < new Date(task.start)) {\n        subTask.start = task.start;\n        subTask.end = new Date(new Date(subTask.start).setDate(new Date(task.start).getDate() + subDuration)).toISOString().split('T')[0];\n      }\n      else \n      {\n        const gap = (new Date(subTask.start) - new Date(task.start)) / (24 * 60 * 60 * 1000);\n        subTask.start = new Date(new Date(subTask.start).setDate(new Date(task.start).getDate() + gap)).toISOString().split('T')[0];\n      }\n      updateTaskDates(subTask,subTaskMap)\n      if(subTask.end > task.end)\n      {\n        task.end = subTask.end\n      }\n    });\n  }\n}\n","import { updateTaskStartEndDates } from \"./updatechart.js\";\nimport GanttChart from \"./gantchart.js\";\n\nconst tooltip = document.createElement('div');\ntooltip.className = 'bar-hover';\ndocument.body.appendChild(tooltip);\nexport function closeModal(modal) {\n    modal.style.display = 'none';\n}\nexport function openAddModal(tasks){\n    // Create or get the modal element\n    let addModal = document.getElementById('addFormModal');\n    if (!addModal) {\n        addModal = document.createElement('div');\n        addModal.setAttribute('id', 'addFormModal');\n        addModal.setAttribute('class','modal')\n        document.body.appendChild(addModal);\n    }\n\n    // Create or get the form element\n    let addTaskForm = document.getElementById('addTaskForm');\n    if (!addTaskForm) {\n        addTaskForm = document.createElement('form');\n        addTaskForm.setAttribute('id', 'addTaskForm');\n        addModal.appendChild(addTaskForm);\n    }\n\n    // Clear existing content in the form\n    addTaskForm.innerHTML = '';\n\n    // Create form elements dynamically and append them to the form\n    createFormField('Task Name:', 'taskName', '', 'text', true ,addTaskForm);\n    createFormField('Start Date:', 'startDate', '', 'date', true ,addTaskForm);\n    createFormField('End Date:', 'endDate', '', 'date', true ,addTaskForm);\n    createFormField('Progress:', 'progress', '', 'number', true ,addTaskForm);\n    // Create and append Save Changes button\n    const saveChangesBtn = document.createElement('button');\n    saveChangesBtn.setAttribute('type', 'button');\n    saveChangesBtn.textContent = 'Save Changes';\n    saveChangesBtn.addEventListener('click', function saveChangesHandler() {\n       addTask(tasks);\n    });\n    addTaskForm.appendChild(saveChangesBtn);\n\n    // Create and append Cancel button\n    const cancelBtn = document.createElement('button');\n    cancelBtn.setAttribute('type', 'button');\n    cancelBtn.textContent = 'Cancel';\n    cancelBtn.addEventListener('click', function saveChangesHandler() {\n       closeModal(addModal)\n    });\n    addTaskForm.appendChild(cancelBtn);\n\n    // Display the modal\n    addModal.style.display = 'block';\n\n    // Prevent the contextmenu event from propagating further\n    event.preventDefault();\n}\n//function to update the task array\nexport function addTask(tasks) {\n    const addModal = document.getElementById('addFormModal');\n    const taskName = document.getElementById('taskName').value;\n    const startDate = document.getElementById('startDate').value;\n    const endDate = document.getElementById('endDate').value;\n\n    // Ensure the required fields are not empty\n    if (!taskName || !startDate || !endDate) {\n        alert('Please fill in all fields.');\n        return;\n    }\n\n    const newTask = {\n        id: tasks.length + 1, // Incremental ID\n        name: taskName,\n        start: startDate,\n        end: endDate,\n        progress: 0, // You can set the progress as needed\n        dependencies: [] // You can set dependencies as needed\n    };\n\n    // Add the new task to the existing tasks\n    tasks.push(newTask);\n    length = length + 1; //after adding of each task length should be increased\n    closeModal(addModal);\n    // Call the function with sample data\n    GanttChart.createChart(tasks);\n}\n  \n// Function to handle task editing\nexport function editTask(event, task, tasks, allTasks = null) {\n    event.preventDefault();\n    GanttChart.stopDrag();\n\n    // Create or get the modal element\n    let editModal = document.getElementById('editModal');\n    if (!editModal) {\n        editModal = document.createElement('div');\n        editModal.setAttribute('id', 'editModal');\n        editModal.setAttribute('class','modal')\n        document.body.appendChild(editModal);\n    }\n\n    // Create or get the form element\n    let editTaskForm = document.getElementById('editTaskForm');\n    if (!editTaskForm) {\n        editTaskForm = document.createElement('form');\n        editTaskForm.setAttribute('id', 'editTaskForm');\n        editModal.appendChild(editTaskForm);\n    }\n\n    // Clear existing content in the form\n    editTaskForm.innerHTML = '';\n\n    // Create form elements dynamically and append them to the form\n    createFormField('Task Name:', 'editTaskName', task.name, 'text', true ,editTaskForm);\n    createFormField('Start Date:', 'editStartDate', task.start, 'date', true ,editTaskForm);\n    createFormField('End Date:', 'editEndDate', task.end, 'date', true ,editTaskForm);\n    createFormField('Progress:', 'editProgress', task.progress, 'number', true ,editTaskForm);\n\n    // Clear existing options\n    const editDependenciesSelect = document.createElement('select');\n    editDependenciesSelect.setAttribute('id', 'editDependencies');\n    editDependenciesSelect.setAttribute('multiple', 'multiple'); // Set the multiple attribute\n    editTaskForm.appendChild(editDependenciesSelect);\n\n    // Display dependencies in the modal as select options\n    tasks.forEach(availableTask => {\n        // Check if the available task is not the current task and not dependent on the current task\n        if (availableTask.id !== task.id && !isTaskDependent(task, availableTask, tasks)) {\n            const option = document.createElement('option');\n            option.value = availableTask.id;\n            option.textContent = availableTask.name;\n            if (task.dependencies.includes(availableTask.id)) {\n                // If the task is already a dependency, mark it as selected\n                option.selected = true;\n            }\n            editDependenciesSelect.appendChild(option);\n        }\n    });\n\n    // Store the task ID in a data attribute of the form\n    editTaskForm.setAttribute('data-task-id', task.id);\n\n    // Create and append Save Changes button\n    const saveChangesBtn = document.createElement('button');\n    saveChangesBtn.setAttribute('type', 'button');\n    saveChangesBtn.textContent = 'Save Changes';\n    saveChangesBtn.addEventListener('click', function saveChangesHandler() {\n        // Call your function to save the edited task data\n        saveEditedTask(tasks, allTasks);\n        // Close the modal after saving changes\n        closeModal(editModal);\n    });\n    editTaskForm.appendChild(saveChangesBtn);\n\n    // Create and append Cancel button\n    const cancelBtn = document.createElement('button');\n    cancelBtn.setAttribute('type', 'button');\n    cancelBtn.textContent = 'Cancel';\n    cancelBtn.addEventListener('click', function saveChangesHandler() {\n        closeModal(editModal);\n    });\n    editTaskForm.appendChild(cancelBtn);\n\n    // Display the modal\n    editModal.style.display = 'block';\n\n    // Prevent the contextmenu event from propagating further\n    event.preventDefault();\n}\n\nfunction createFormField(labelText, inputId, inputValue, inputType, required,parentName) {\n    const label = document.createElement('label');\n    label.setAttribute('for', inputId);\n    label.textContent = labelText;\n\n    const input = document.createElement('input');\n    input.setAttribute('type', inputType);\n    input.setAttribute('id', inputId);\n    input.setAttribute('name', inputId);\n    input.value = inputValue;\n    input.required = required;\n\n    // Append label and input to the form\n    parentName.appendChild(label);\n    parentName.appendChild(input);\n}\n\n\n  \n// Function to check if a task is dependent on another task\nexport function isTaskDependent(currentTask, otherTask, allTasks) {\n    return otherTask.dependencies.includes(currentTask.id) || otherTask.dependencies.some(depId => isTaskDependent(currentTask, allTasks[depId - 1], allTasks));\n}\n  \n// Function to save edited task\nexport function saveEditedTask(tasks,alltasks=null) {\n    const editTaskForm = document.getElementById('editTaskForm');\n    const editTaskNameInput = document.getElementById('editTaskName');\n    const editStartDateInput = document.getElementById('editStartDate');\n    const editEndDateInput = document.getElementById('editEndDate');\n    const editProgress = document.getElementById('editProgress');\n    const editDependenciesSelect = document.getElementById('editDependencies');\n\n    // Retrieve the edited values\n    const editedTaskName = editTaskNameInput.value;\n    const editedStartDate = editStartDateInput.value;\n    const editedEndDate = editEndDateInput.value;\n    const progress = editProgress.value;\n    // Retrieve the task ID from the data attribute\n    const taskId = parseInt(editTaskForm.getAttribute('data-task-id'), 10);\n\n    // Retrieve the selected dependencies from the updated select element\n    const selectedDependencies = Array.from(editDependenciesSelect.selectedOptions).map(option => parseInt(option.value, 10));\n\n    // Find the task in the array and update its properties\n    const editedTaskIndex = tasks.findIndex(task => task.id === taskId);\n    if (editedTaskIndex !== -1) {\n        tasks[editedTaskIndex].name = editedTaskName;\n        tasks[editedTaskIndex].start = editedStartDate;\n        tasks[editedTaskIndex].end = editedEndDate;\n        tasks[editedTaskIndex].progress = progress > 100 ? 100 : progress;\n        tasks[editedTaskIndex].dependencies = selectedDependencies;\n    }\n\n    // Update the Gantt chart with the new data\n    updateTaskStartEndDates(tasks);\n    // Call the function with sample data\n    if(alltasks)\n    {\n        GanttChart.createChart(alltasks);\n    }\n    else{\n        GanttChart.createChart(tasks);\n    }\n}\n\nexport function showTaskDetails(task,allTasks) {\n    const dependentTaskNames = task.dependencies.map(depId => allTasks[depId - 1].name);\n    const dependentTaskInfo = dependentTaskNames.length > 0 ? `Dependencies: ${dependentTaskNames.join(', ')}` : '';\n\n    tooltip.innerHTML = `\n    Task: ${task.name}<br>\n    Start: ${task.start}<br>\n    End: ${task.end}<br>\n    ${dependentTaskInfo}\n    `;\n    tooltip.style.left = `${event.pageX}px`;\n    tooltip.style.top = `${event.pageY}px`;\n    tooltip.style.display = 'block';\n}\n\nexport function hideTaskDetails() {\n    tooltip.style.display = 'none';\n}","import { createGridLines, createMonthHeadings, createDateScale } from './date-utl.js';\nimport { updateTaskStartEndDates } from './updatechart.js';\nimport { hideTaskDetails , showTaskDetails , editTask ,openAddModal , addTask  } from './saveEdit.js';\n\nconst svgNS = 'http://www.w3.org/2000/svg';\nexport default class GanttChart {\n  constructor() {\n    this.dateInfo;\n    this.taskCount;\n    this.isDragging = false;\n    this.initialX;\n    this.initialWidth;\n    this.isDragStart;\n    // Variables to store the current task and progress bar\n    this.currentTaskRect;\n    this.currentProgressRect;\n    this.dragMoveListener = null;\n    this.length;\n    this.dependentTask ;\n    this.tasks ;\n    this.allTask ; \n  }\n\n  getTotalLength(tasks) {\n    return tasks.reduce((total, task) => {\n      return total + 1 + (task.subTask ? this.getTotalLength(task.subTask) : 0);\n    }, 0);\n  }\n\n  createGanttChart(tasks) {\n    updateTaskStartEndDates(tasks);\n    const chartContainer = document.getElementById('chart');\n     // Create a button element\n    const button = document.createElement('button');\n    button.setAttribute('class','top-place add-button')\n    button.textContent = 'Add Task'; // Set the button text\n    button.addEventListener('click', () => {\n      openAddModal(tasks);\n    });\n    let svg = chartContainer.querySelector('svg');\n    // Check if the SVG element already exists\n    if (!svg) {\n      // Append the button to the parent container of the SVG\n      chartContainer.appendChild(button);\n      // If not, create a new SVG element\n      svg = this.createSVG(tasks);\n      chartContainer.appendChild(svg);\n    } else {\n      this.updateGanttChartContent(svg, tasks);\n    }\n  }\n\n  createSVG(tasks) {\n    const svg = document.createElementNS(svgNS, 'svg');\n    svg.setAttribute('min-width', '100%');\n    svg.setAttribute('height', '200%');\n    const dateGroup = document.createElementNS(svgNS, 'g'); // Create a group element for the task\n    dateGroup.setAttribute('class', 'date-groups');\n    svg.appendChild(dateGroup);\n    this.dateInfo = this.calculateDateInfo(tasks);\n    const chartWidth = this.calculateChartWidth(this.dateInfo);\n    this.length = this.getTotalLength(tasks);\n\n    svg.setAttribute('viewBox', `0 0 ${chartWidth} ${this.length * 40 + 40}`);\n\n    createGridLines(dateGroup, chartWidth, this.length);\n    createMonthHeadings(dateGroup, this.dateInfo, chartWidth);\n    createDateScale(dateGroup, this.dateInfo, chartWidth, this.length);\n    this.createTaskBars(svg, tasks, this.dateInfo);\n    return svg;\n  }\n\n  calculateDateInfo(tasks) {\n    const startDates = tasks.map(task => new Date(task.start));\n    const endDates = tasks.map(task => new Date(task.end));\n\n    const minDate = new Date(Math.min(...startDates));\n    const startingDate = new Date(minDate);\n    startingDate.setDate(minDate.getDate() - 5);\n\n    const maxDate = new Date(Math.max(...endDates));\n    const dateDiff = (maxDate - minDate) / (24 * 60 * 60 * 1000);\n\n    let multiplier = dateDiff > 100 ? 54 : dateDiff > 30 ? 60 : 120;\n\n    return { startingDate, maxDate, multiplier };\n  }\n\n  calculateChartWidth(dateInfo) {\n    return (dateInfo.multiplier * ((dateInfo.maxDate - dateInfo.startingDate) / (24 * 60 * 60 * 1000)));\n  }\n\n  createTaskBars(svg, tasks, dateInfo) {\n    let customIndex = 0;\n\n    tasks.forEach((task, index) => {\n      const taskGroup = document.createElementNS(svgNS, 'g'); // Create a group element for the task\n      taskGroup.setAttribute('class', 'tasks');\n      svg.appendChild(taskGroup);\n\n      const dependentTaskEnd = Math.max(...task.dependencies.map(depId => new Date(tasks[depId - 1].end)));\n      const startOffset = Math.max((dependentTaskEnd - dateInfo.startingDate) / (24 * 60 * 60 * 1000) * 50, (new Date(task.start) - dateInfo.startingDate) / (24 * 60 * 60 * 1000) * 50);\n      const duration = (new Date(task.end) - new Date(task.start)) / (24 * 60 * 60 * 1000) * 50;\n\n      const rect = document.createElementNS(svgNS, 'rect');\n      rect.setAttribute('x', startOffset);\n      rect.setAttribute('y', customIndex * 40 + 40);\n      rect.setAttribute('width', duration);\n      rect.setAttribute('height', 30);\n      rect.setAttribute('fill', '#3498db');\n      taskGroup.appendChild(rect);\n\n      const progressWidth = (duration * task.progress) / 100;\n      const progressRect = document.createElementNS(svgNS, 'rect');\n      progressRect.setAttribute('x', startOffset);\n      progressRect.setAttribute('y', customIndex * 40 + 40);\n      progressRect.setAttribute('width', progressWidth);\n      progressRect.setAttribute('height', 30);\n      progressRect.setAttribute('fill', '#2ecc71');\n      taskGroup.appendChild(progressRect);\n\n      const text = document.createElementNS(svgNS, 'text');\n      text.setAttribute('x', startOffset + 5);\n      text.setAttribute('y', customIndex * 40 + 60);\n      text.textContent = task.name;\n      taskGroup.appendChild(text);\n\n      // Render subtasks\n      if (task.subTask && task.subTask.length > 0) {\n        const subTaskGroup = document.createElementNS(svgNS, 'g'); // Create a group element for the task\n        subTaskGroup.setAttribute('class','subtask')\n        taskGroup.appendChild(subTaskGroup);\n        task.subTask.forEach((subtask, subIndex) => {\n          const subDependentTaskEnd = Math.max(...subtask.dependencies.map(depId => new Date(task.subTask[depId - 1].end)));\n          const subStartOffset = Math.max((subDependentTaskEnd - dateInfo.startingDate) / (24 * 60 * 60 * 1000) * 50, (new Date(subtask.start) - dateInfo.startingDate) / (24 * 60 * 60 * 1000) * 50);\n          const subDuration = (new Date(subtask.end) - new Date(subtask.start)) / (24 * 60 * 60 * 1000) * 50;\n\n          const subRect = document.createElementNS(svgNS, 'rect');\n          subRect.setAttribute('class','subtask')\n          subRect.setAttribute('x', subStartOffset);\n          subRect.setAttribute('y', (subIndex + customIndex + 1) * 40 + 40);\n          subRect.setAttribute('width', subDuration);\n          subRect.setAttribute('height', 15);\n          subRect.setAttribute('fill', '#e74c3c');\n          subTaskGroup.appendChild(subRect);\n\n          const subProgressWidth = (subDuration * subtask.progress) / 100;\n          const subProgressRect = document.createElementNS(svgNS, 'rect');\n          subProgressRect.setAttribute('class','subtask-progress')\n          subProgressRect.setAttribute('x', subStartOffset);\n          subProgressRect.setAttribute('y', (subIndex + customIndex + 1) * 40 + 40);\n          subProgressRect.setAttribute('width', subProgressWidth);\n          subProgressRect.setAttribute('height', 15);\n          subProgressRect.setAttribute('fill', '#c0392b');\n          subTaskGroup.appendChild(subProgressRect);\n\n          const subText = document.createElementNS(svgNS, 'text');\n          subText.setAttribute('x', subStartOffset + 5);\n          subText.setAttribute('y', (subIndex + customIndex + 1) * 40 + 50);\n          subText.textContent = subtask.name;\n          subText.setAttribute('font-size', '10px');\n          subTaskGroup.appendChild(subText);\n\n          subText.addEventListener('mouseover', () => showTaskDetails(subtask, task.subTask));\n          subRect.addEventListener('mouseover', () => showTaskDetails(subtask, task.subTask));\n          subRect.addEventListener('mouseout', hideTaskDetails);\n\n          subProgressRect.addEventListener('mouseover', () => showTaskDetails(subtask, task.subTask));\n          subProgressRect.addEventListener('mouseout', hideTaskDetails);\n\n          subRect.addEventListener('contextmenu', (event) => {\n            event.preventDefault();\n            editTask(event, subtask, task.subTask, tasks);\n          });\n          subProgressRect.addEventListener('contextmenu', (event) => {\n            event.preventDefault();\n            editTask(event, subtask, task.subTask, tasks);\n          });\n          subText.addEventListener('contextmenu', (event) => {\n            event.preventDefault();\n            editTask(event, subtask, task.subTask, tasks);\n          });\n          subRect.addEventListener('mousedown', (event) => {\n            event.preventDefault();\n            this.startDrag(event, subRect, subProgressRect , subtask , task.subTask , tasks);\n          });\n          subProgressRect.addEventListener('mousedown', (event) => {\n            event.preventDefault();\n            this.startDrag(event, subRect, subProgressRect, subtask , task.subTask , tasks)\n          });\n          subText.addEventListener('mousedown', (event) => {\n            event.preventDefault();\n            this.startDrag(event, subRect, subProgressRect , subtask , task.subTask , tasks);\n          });\n        });\n      }\n\n      // Add event listeners for both rectangle and progress bar\n      text.addEventListener('mouseover', () => showTaskDetails(task, tasks));\n      rect.addEventListener('mouseover', () => showTaskDetails(task, tasks));\n      rect.addEventListener('mouseout', hideTaskDetails);\n\n      progressRect.addEventListener('mouseover', () => showTaskDetails(task, tasks));\n      progressRect.addEventListener('mouseout', hideTaskDetails);\n\n      rect.addEventListener('contextmenu', (event) => {\n        event.preventDefault();\n        editTask(event, task, tasks);\n      });\n      progressRect.addEventListener('contextmenu', (event) => {\n        event.preventDefault();\n        editTask(event, task, tasks);\n      });\n      text.addEventListener('contextmenu', (event) => {\n        event.preventDefault();\n        editTask(event, task, tasks);\n      });\n      // Add event listeners for dragging to edit start and end dates\n      rect.addEventListener('mousedown', (event) => {\n        event.preventDefault();\n        this.startDrag(event, rect, progressRect,task ,tasks);\n      });\n      progressRect.addEventListener('mousedown', (event) => {\n        event.preventDefault();\n        this.startDrag(event, rect, progressRect ,task ,tasks)\n      });\n      text.addEventListener('mousedown', (event) => {\n        event.preventDefault();\n        this.startDrag(event, rect, progressRect,task ,tasks);\n      });     \n      document.addEventListener('mouseup', (event) => {\n        document.removeEventListener('mousemove',this.dragMoveListener)\n        this.handleMouseUp(this.taskRect, this.dependentTask, this.tasks, this.dateInfo ,this.allTasks);\n      });\n      // task below the subtask\n      customIndex = customIndex + 1;\n      if (task.subTask && task.subTask.length > 0) {\n        customIndex = customIndex + task.subTask.length;\n      }\n    });\n  }\n\n  throttle(func, limit) {\n    let inThrottle;\n    return function () {\n      const args = arguments;\n      const context = this;\n      if (!inThrottle) {\n        func.apply(context, args);\n        inThrottle = true;\n        setTimeout(() => (inThrottle = false), limit);\n      }\n    };\n  }\n\n  isExceedingDepenentEndDate(sartDate, dependentTask, tasks) {\n    const tasksWithDesiredIds = tasks.filter(task =>\n      dependentTask.dependencies.includes(task.id)\n    );\n    const endDates = tasksWithDesiredIds.map(task => new Date(task.end));\n    const maxDate = new Date(Math.max(...endDates))\n    if (maxDate > sartDate) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n  handleDragMove(event, taskRect, progress, dependentTask, tasks ,allTasks=null) {\n    event.preventDefault();\n    if (this.isDragging) {\n      this.updateTaskBarPosition(event.clientX, taskRect, progress, dependentTask, tasks ,allTasks);\n    }\n  }\n\n  startDrag(event, taskRect, taskProgressRect , dependentTask, task , allTasks=null) {\n    this.dependentTask = dependentTask ;\n    this.tasks = task ;\n    this.allTasks = allTasks ; \n    document.body.classList.add('dragging');\n    hideTaskDetails\n    this.isDragging = true;\n    this.initialX = event.clientX;\n    this.initialWidth = parseFloat(taskRect.getAttribute('width'));\n    this.isDragStart = event.clientX < taskRect.getBoundingClientRect().left + this.initialWidth / 2;\n\n    // Set the current task and progress bar\n    this.currentTaskRect = taskRect;\n    this.currentProgressRect = taskProgressRect;\n    this.dragMoveListener = this.throttle((event) => {\n      this.handleDragMove(event, this.currentTaskRect, this.currentProgressRect, dependentTask, task, allTasks);\n    }, 16); \n    event.preventDefault();\n    document.addEventListener('mousemove',this.dragMoveListener);\n\n  }\n\n  updateTaskBarPosition(clientX, taskRect, progress, dependentTask, tasks ,allTasks) {\n    const deltaX = (clientX - this.initialX) * .73 // Adjust the sensitivity factor \n    if (this.isDragStart) {\n      // Dragging start handle\n      const newStartOffset = (new Date(dependentTask.start) - this.dateInfo.startingDate) / (24 * 60 * 60 * 1000) * 50 + deltaX;\n      const startDate = new Date(this.dateInfo.startingDate.getTime() + (parseFloat(taskRect.getAttribute('x'))) / 50 * (24 * 60 * 60 * 1000));\n\n      if (this.isExceedingDepenentEndDate(startDate, dependentTask, tasks)) {\n        alert('Start Date has exceeded its dependent EndDate');\n        document.body.classList.remove('dragging');\n        this.isDragging = false;\n        const updatedTaskIndex = tasks.findIndex(t => t.id === dependentTask.id);\n        if (updatedTaskIndex !== -1) {\n          const newEndDate = new Date(startDate.getTime() + (parseFloat(taskRect.getAttribute('width')) / 52) * (24 * 60 * 60 * 1000));\n\n          // Update the properties of the task in the array\n          tasks[updatedTaskIndex].start = startDate.toISOString().split('T')[0];\n          tasks[updatedTaskIndex].end = newEndDate.toISOString().split('T')[0];\n\n          // Update the Gantt chart with the new data\n          updateTaskStartEndDates(tasks);\n          if(allTasks)\n          {\n            this.createGanttChart(allTasks);\n          }\n          else{\n            this.createGanttChart(tasks);\n          }\n        }\n      }\n\n      // const endDate = new Date(dateInfo.startingDate.getTime() + (parseFloat(taskRect.getAttribute('x')) + parseFloat(taskRect.getAttribute('width'))) / 50 * (24 * 60 * 60 * 1000));\n\n      const maxStartOffset = parseFloat(taskRect.getAttribute('x')) + parseFloat(taskRect.getAttribute('width'));\n      const adjustedStartOffset = Math.min(newStartOffset, maxStartOffset);\n      const adjustedWidth = maxStartOffset - adjustedStartOffset;\n      taskRect.setAttribute('x', newStartOffset);\n      taskRect.setAttribute('width', adjustedWidth);\n\n      progress.setAttribute('x', newStartOffset);\n      progress.setAttribute('width', adjustedWidth * dependentTask.progress / 100);\n\n    } else {\n      // Dragging end handle\n      const newWidth = this.initialWidth + deltaX;\n      taskRect.setAttribute('width', newWidth);\n      progress.setAttribute('width', newWidth * dependentTask.progress / 100);\n    }\n    this.taskRect = taskRect;\n  }\n\n  handleMouseUp(taskRect,  dependentTask, tasks, dateInfo, allTasks = null) {\n    document.body.classList.remove('dragging');\n    if (this.isDragging) {\n      this.isDragging = false\n      // Find the task in the array and update its properties\n      const updatedTaskIndex = tasks.findIndex((t) => t.id === dependentTask.id);\n      if (updatedTaskIndex !== -1) {\n        const newStartDate = new Date(\n          dateInfo.startingDate.getTime() +\n          (parseFloat(taskRect.getAttribute('x')) / 50) * (24 * 60 * 60 * 1000)\n        );\n        const newEndDate = new Date(\n          newStartDate.getTime() +\n          (parseFloat(taskRect.getAttribute('width')) / 50) * (24 * 60 * 60 * 1000)\n        );\n        // Update the properties of the task in the array\n        tasks[updatedTaskIndex].start = newStartDate.toISOString().split('T')[0];\n        tasks[updatedTaskIndex].end = newEndDate.toISOString().split('T')[0];\n        // Update the Gantt chart with the new data\n        updateTaskStartEndDates(tasks);\n        if (allTasks) {\n          this.createGanttChart(allTasks);\n        } else {\n          this.createGanttChart(tasks);\n        }\n\n      }\n    }\n\n  }\n\n  updateGanttChartContent(svg, tasks) {\n    // Clear existing content\n    while (svg.firstChild) {\n      svg.removeChild(svg.firstChild);\n    }\n    this.length = this.getTotalLength(tasks)\n    // Update the content with the new tasks\n    this.dateInfo = this.calculateDateInfo(tasks);\n    const chartWidth = this.calculateChartWidth(this.dateInfo);\n    const dateGroup = document.createElementNS(svgNS, 'g'); // Create a group element for the task\n    dateGroup.setAttribute('class', 'date-groups');\n    svg.appendChild(dateGroup);\n\n    svg.setAttribute('viewBox', `0 0 ${chartWidth} ${this.length * 40 + 40}`);\n\n    createGridLines(dateGroup, chartWidth, this.length);\n    createMonthHeadings(dateGroup, this.dateInfo, chartWidth);\n    createDateScale(dateGroup, this.dateInfo, chartWidth, this.length);\n    this.createTaskBars(svg, tasks, this.dateInfo);\n  }\n  static createChart(tasks) {\n    const ganttChart = new GanttChart();\n    ganttChart.createGanttChart(tasks);\n  }\n\n  static stopDrag(){\n    // Remove the event listener when the dragging stops\n    document.removeEventListener('mousemove', this.dragMoveListener);  \n  }\n}"],"names":["svgNS","createGridLines","dateGroup","chartWidth","taskCount","gridLines","document","createElementNS","classList","add","appendChild","i","line","setAttribute","createMonthHeadings","dateInfo","month","months","currentMonth","monthIndex","Date","startingDate","getTime","getMonth","monthHeading","textContent","createDateScale","date","dateScale","currentDate","text","getDate","updateTaskStartEndDates","tasks","taskMap","Map","map","task","id","forEach","updateTaskDates","subTask","length","subTaskMap","subtask","subDuration","end","start","setDate","toISOString","split","gap","updateSubTaskStartEndDate","dependencies","dependentTasks","depId","get","maxEndDate","Math","max","depTask","dependentTask","duration","tooltip","createElement","closeModal","modal","style","display","openAddModal","addModal","getElementById","body","addTaskForm","innerHTML","createFormField","saveChangesBtn","addEventListener","taskName","value","startDate","endDate","alert","newTask","name","progress","push","GanttChart","createChart","addTask","cancelBtn","event","preventDefault","editTask","allTasks","stopDrag","editModal","editTaskForm","editDependenciesSelect","availableTask","isTaskDependent","option","includes","selected","alltasks","editTaskNameInput","editStartDateInput","editEndDateInput","editProgress","editedTaskName","editedStartDate","editedEndDate","taskId","parseInt","getAttribute","selectedDependencies","Array","from","selectedOptions","editedTaskIndex","findIndex","saveEditedTask","labelText","inputId","inputValue","inputType","required","parentName","label","input","currentTask","otherTask","some","showTaskDetails","dependentTaskNames","dependentTaskInfo","join","left","pageX","top","pageY","hideTaskDetails","className","constructor","this","isDragging","initialX","initialWidth","isDragStart","currentTaskRect","currentProgressRect","dragMoveListener","allTask","getTotalLength","reduce","total","createGanttChart","chartContainer","button","svg","querySelector","updateGanttChartContent","createSVG","calculateDateInfo","calculateChartWidth","createTaskBars","startDates","endDates","minDate","min","maxDate","dateDiff","multiplier","customIndex","index","taskGroup","dependentTaskEnd","startOffset","rect","progressWidth","progressRect","subTaskGroup","subIndex","subDependentTaskEnd","subStartOffset","subRect","subProgressWidth","subProgressRect","subText","startDrag","removeEventListener","handleMouseUp","taskRect","throttle","func","limit","inThrottle","args","arguments","context","apply","setTimeout","isExceedingDepenentEndDate","sartDate","filter","handleDragMove","updateTaskBarPosition","clientX","taskProgressRect","parseFloat","getBoundingClientRect","deltaX","newStartOffset","remove","updatedTaskIndex","t","newEndDate","maxStartOffset","adjustedWidth","newWidth","newStartDate","firstChild","removeChild"],"mappings":"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"}