{"version":3,"file":"gantt.min.js","sources":["../js/date-utl.js","../js/updatechart.js","../js/saveEdit.js","../js/gantchart.js"],"sourcesContent":["const svgNS = 'http://www.w3.org/2000/svg';\n\nexport function createGridLines(dateGroup, chartWidth, taskCount) {\n    const gridLines = document.createElementNS(svgNS, 'g');\n    gridLines.classList.add('lines')\n    dateGroup.appendChild(gridLines)\n    for (let i = 0; i <= chartWidth; i += 50) {\n        const line = document.createElementNS(svgNS, 'line');\n        line.setAttribute('x1', i);\n        line.setAttribute('x2', i);\n        line.setAttribute('y1', 35);\n        line.setAttribute('y2', taskCount * 40 + 40);\n        line.classList.add('grid-line');\n        gridLines.appendChild(line);\n    }\n}\n\nexport function createMonthHeadings(dateGroup, dateInfo, chartWidth) {\n    const month = document.createElementNS(svgNS, 'g');\n    month.classList.add('month')\n    dateGroup.appendChild(month)\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    let currentMonth = -1;\n\n    for (let i = 0; i <= chartWidth; i += 50) {\n        const currentDate = new Date(dateInfo.startingDate.getTime() + i / 50 * (24 * 60 * 60 * 1000));\n        const monthIndex = currentDate.getMonth();\n        if (monthIndex !== currentMonth) {\n        currentMonth = monthIndex;\n\n        const monthHeading = document.createElementNS(svgNS, 'text');\n        monthHeading.setAttribute('x', i);\n        monthHeading.setAttribute('y', 15);\n        monthHeading.classList.add('month-heading');\n        monthHeading.textContent = months[currentMonth];\n        month.appendChild(monthHeading);\n        }\n    }\n}\n\nexport function createDateScale(dateGroup, dateInfo, chartWidth, taskCount) {\n    const date = document.createElementNS(svgNS,'g')\n    dateGroup.appendChild(date)\n    date.classList.add('date')\n    const dateScale = document.createElementNS(svgNS, 'text');\n    dateScale.setAttribute('x', '0');\n    dateScale.setAttribute('y', taskCount);\n    date.appendChild(dateScale);\n\n    for (let i = 0; i <= chartWidth; i += 50) {\n        const currentDate = new Date(dateInfo.startingDate.getTime() + i / 50 * (24 * 60 * 60 * 1000));\n        const text = document.createElementNS(svgNS, 'text');\n        text.setAttribute('x', i - 3);\n        text.setAttribute('y', taskCount + 25);\n        text.textContent = currentDate.getDate();\n        date.appendChild(text);\n    }\n}\n","export const updateTaskStartEndDates =(tasks)=> {\n  const taskMap = new Map(tasks.map(task => [task.id, task]));\n\n  tasks.forEach(task => {\n    updateTaskDates(task, taskMap);\n    updateSubTaskStartEndDate(task);\n  });\n\n}\nfunction updateTaskDates(task, taskMap) {\n  if (task.dependencies.length === 0) {\n    return; // Base case: no dependencies, nothing to update\n  }\n\n  const dependentTasks = task.dependencies.map(depId => taskMap.get(depId));\n\n  // Find the maximum end date among dependent tasks\n  const maxEndDate = new Date(Math.max(...dependentTasks.map(depTask => new Date(depTask.end))));\n\n  dependentTasks.forEach(dependentTask => {\n    updateTaskDates(dependentTask, taskMap);\n\n    // Calculate the duration of the task\n    const duration = (new Date(task.end) - new Date(task.start)) / (24 * 60 * 60 * 1000);\n\n    // Check if the start date of the dependent task is after the max end date\n    if (new Date(task.start) < maxEndDate) {\n      // Update the start date of the current task based on the maximum end date of dependent tasks\n      task.start = maxEndDate.toISOString().split('T')[0];\n\n      // Update the end date of the current task based on its duration\n      task.end = new Date(new Date(task.start).setDate(new Date(task.start).getDate() + duration)).toISOString().split('T')[0];\n    }\n  });\n  \n}\n\nfunction updateSubTaskStartEndDate(task)\n{\n   // Check if the task has subtasks\n   if (task.subTask && task.subTask.length > 0) {\n    const subTaskMap=new Map(task.subTask.map(subtask => [subtask.id, subtask]));\n    task.subTask.forEach(subTask => {\n      const subDuration = (new Date(subTask.end) - new Date(subTask.start)) / (24 * 60 * 60 * 1000);\n      // Example condition: If subtask start date is less than task start date, update it\n      if (new Date(subTask.start) < new Date(task.start)) {\n        subTask.start = task.start;\n        subTask.end = new Date(new Date(subTask.start).setDate(new Date(task.start).getDate() + subDuration)).toISOString().split('T')[0];\n      }\n      else \n      {\n        const gap = (new Date(subTask.start) - new Date(task.start)) / (24 * 60 * 60 * 1000);\n        subTask.start = new Date(new Date(subTask.start).setDate(new Date(task.start).getDate() + gap)).toISOString().split('T')[0];\n      }\n      updateTaskDates(subTask,subTaskMap)\n      if(subTask.end > task.end)\n      {\n        task.end = subTask.end\n      }\n    });\n  }\n}\n","import { updateTaskStartEndDates } from \"./updatechart.js\";\nimport GanttChart from \"./gantchart.js\";\n\nconst tooltip = document.createElement('div');\ntooltip.className = 'bar-hover';\ndocument.body.appendChild(tooltip);\nexport function closeEditModal() {\n    const editModal = document.getElementById('editModal');\n    editModal.style.display = 'none';\n}\n\n//function to update the task array\nexport function addTask(tasks) {\n    const taskName = document.getElementById('taskName').value;\n    const startDate = document.getElementById('startDate').value;\n    const endDate = document.getElementById('endDate').value;\n\n    // Ensure the required fields are not empty\n    if (!taskName || !startDate || !endDate) {\n        alert('Please fill in all fields.');\n        return;\n    }\n\n    const newTask = {\n        id: tasks.length + 1, // Incremental ID\n        name: taskName,\n        start: startDate,\n        end: endDate,\n        progress: 0, // You can set the progress as needed\n        dependencies: [] // You can set dependencies as needed\n    };\n\n    // Add the new task to the existing tasks\n    tasks.push(newTask);\n    length = length + 1; //after adding of each task length should be increased\n    // Update the Gantt chart with the new data\n    updateTaskStartEndDates(tasks);\n    // Call the function with sample data\n    GanttChart.createChart(tasks);\n}\n  \n// Function to handle task editing\nexport function editTask(event, task, tasks, allTasks = null) {\n    event.preventDefault();\n    GanttChart.stopDrag();\n\n    // Create or get the modal element\n    let editModal = document.getElementById('editModal');\n    if (!editModal) {\n        editModal = document.createElement('div');\n        editModal.setAttribute('id', 'editModal');\n        editModal.setAttribute('class','modal')\n        document.body.appendChild(editModal);\n    }\n\n    // Create or get the form element\n    let editTaskForm = document.getElementById('editTaskForm');\n    if (!editTaskForm) {\n        editTaskForm = document.createElement('form');\n        editTaskForm.setAttribute('id', 'editTaskForm');\n        editModal.appendChild(editTaskForm);\n    }\n\n    // Clear existing content in the form\n    editTaskForm.innerHTML = '';\n\n    // Create form elements dynamically and append them to the form\n    createFormField('Task Name:', 'editTaskName', task.name, 'text', true);\n    createFormField('Start Date:', 'editStartDate', task.start, 'date', true);\n    createFormField('End Date:', 'editEndDate', task.end, 'date', true);\n    createFormField('Progress:', 'editProgress', task.progress, 'number', true);\n\n    // Clear existing options\n    const editDependenciesSelect = document.createElement('select');\n    editDependenciesSelect.setAttribute('id', 'editDependencies');\n    editDependenciesSelect.setAttribute('multiple', 'multiple'); // Set the multiple attribute\n    editTaskForm.appendChild(editDependenciesSelect);\n\n    // Display dependencies in the modal as select options\n    tasks.forEach(availableTask => {\n        // Check if the available task is not the current task and not dependent on the current task\n        if (availableTask.id !== task.id && !isTaskDependent(task, availableTask, tasks)) {\n            const option = document.createElement('option');\n            option.value = availableTask.id;\n            option.textContent = availableTask.name;\n            if (task.dependencies.includes(availableTask.id)) {\n                // If the task is already a dependency, mark it as selected\n                option.selected = true;\n            }\n            editDependenciesSelect.appendChild(option);\n        }\n    });\n\n    // Store the task ID in a data attribute of the form\n    editTaskForm.setAttribute('data-task-id', task.id);\n\n    // Create and append Save Changes button\n    const saveChangesBtn = document.createElement('button');\n    saveChangesBtn.setAttribute('type', 'button');\n    saveChangesBtn.textContent = 'Save Changes';\n    saveChangesBtn.addEventListener('click', function saveChangesHandler() {\n        // Call your function to save the edited task data\n        saveEditedTask(tasks, allTasks);\n        // Close the modal after saving changes\n        closeEditModal();\n    });\n    editTaskForm.appendChild(saveChangesBtn);\n\n    // Create and append Cancel button\n    const cancelBtn = document.createElement('button');\n    cancelBtn.setAttribute('type', 'button');\n    cancelBtn.textContent = 'Cancel';\n    cancelBtn.addEventListener('click', closeEditModal);\n    editTaskForm.appendChild(cancelBtn);\n\n    // Display the modal\n    editModal.style.display = 'block';\n\n    // Prevent the contextmenu event from propagating further\n    event.preventDefault();\n}\n\nfunction createFormField(labelText, inputId, inputValue, inputType, required) {\n    const label = document.createElement('label');\n    label.setAttribute('for', inputId);\n    label.textContent = labelText;\n\n    const input = document.createElement('input');\n    input.setAttribute('type', inputType);\n    input.setAttribute('id', inputId);\n    input.setAttribute('name', inputId);\n    input.value = inputValue;\n    input.required = required;\n\n    // Append label and input to the form\n    editTaskForm.appendChild(label);\n    editTaskForm.appendChild(input);\n}\n\n\n  \n// Function to check if a task is dependent on another task\nexport function isTaskDependent(currentTask, otherTask, allTasks) {\n    return otherTask.dependencies.includes(currentTask.id) || otherTask.dependencies.some(depId => isTaskDependent(currentTask, allTasks[depId - 1], allTasks));\n}\n  \n// Function to save edited task\nexport function saveEditedTask(tasks,alltasks=null) {\n    // console.log(tasks);\n    const editTaskForm = document.getElementById('editTaskForm');\n    const editTaskNameInput = document.getElementById('editTaskName');\n    const editStartDateInput = document.getElementById('editStartDate');\n    const editEndDateInput = document.getElementById('editEndDate');\n    const editProgress = document.getElementById('editProgress');\n    const editDependenciesSelect = document.getElementById('editDependencies');\n\n    // Retrieve the edited values\n    const editedTaskName = editTaskNameInput.value;\n    const editedStartDate = editStartDateInput.value;\n    const editedEndDate = editEndDateInput.value;\n    const progress = editProgress.value;\n    // Retrieve the task ID from the data attribute\n    const taskId = parseInt(editTaskForm.getAttribute('data-task-id'), 10);\n\n    // Retrieve the selected dependencies from the updated select element\n    const selectedDependencies = Array.from(editDependenciesSelect.selectedOptions).map(option => parseInt(option.value, 10));\n\n    // Find the task in the array and update its properties\n    const editedTaskIndex = tasks.findIndex(task => task.id === taskId);\n    if (editedTaskIndex !== -1) {\n        tasks[editedTaskIndex].name = editedTaskName;\n        tasks[editedTaskIndex].start = editedStartDate;\n        tasks[editedTaskIndex].end = editedEndDate;\n        tasks[editedTaskIndex].progress = progress > 100 ? 100 : progress;\n        tasks[editedTaskIndex].dependencies = selectedDependencies;\n    }\n\n    // Update the Gantt chart with the new data\n    updateTaskStartEndDates(tasks);\n    console.log(tasks);\n    // Call the function with sample data\n    if(alltasks)\n    {\n        GanttChart.createChart(alltasks);\n    }\n    else{\n        GanttChart.createChart(tasks);\n    }\n\n    // Close the modal\n    closeEditModal();\n}\n\nexport function showTaskDetails(task,allTasks) {\n    const dependentTaskNames = task.dependencies.map(depId => allTasks[depId - 1].name);\n    const dependentTaskInfo = dependentTaskNames.length > 0 ? `Dependencies: ${dependentTaskNames.join(', ')}` : '';\n\n    tooltip.innerHTML = `\n    Task: ${task.name}<br>\n    Start: ${task.start}<br>\n    End: ${task.end}<br>\n    ${dependentTaskInfo}\n    `;\n    tooltip.style.left = `${event.pageX}px`;\n    tooltip.style.top = `${event.pageY}px`;\n    tooltip.style.display = 'block';\n}\n\nexport function hideTaskDetails() {\n    tooltip.style.display = 'none';\n}","import { createGridLines, createMonthHeadings, createDateScale } from './date-utl.js';\nimport { updateTaskStartEndDates } from './updatechart.js';\nimport { hideTaskDetails , showTaskDetails , editTask ,saveEditedTask , addTask  } from './saveEdit.js';\n\nconst svgNS = 'http://www.w3.org/2000/svg';\nexport default class GanttChart {\n  constructor() {\n    this.dateInfo;\n    this.taskCount;\n    this.isDragging = false;\n    this.initialX;\n    this.initialWidth;\n    this.isDragStart;\n    // Variables to store the current task and progress bar\n    this.currentTaskRect;\n    this.currentProgressRect;\n    this.dragMoveListener = null;\n    this.length;\n    this.dependentTask ;\n    this.tasks ;\n    this.allTask ; \n  }\n\n  getTotalLength(tasks) {\n    return tasks.reduce((total, task) => {\n      return total + 1 + (task.subTask ? this.getTotalLength(task.subTask) : 0);\n    }, 0);\n  }\n\n  createGanttChart(tasks) {\n    updateTaskStartEndDates(tasks);\n    const chartContainer = document.getElementById('chart');\n    let svg = chartContainer.querySelector('svg');\n\n    // Check if the SVG element already exists\n    if (!svg) {\n      // If not, create a new SVG element\n      svg = this.createSVG(tasks);\n      chartContainer.appendChild(svg);\n    } else {\n      this.updateGanttChartContent(svg, tasks);\n    }\n  }\n\n  createSVG(tasks) {\n    const svg = document.createElementNS(svgNS, 'svg');\n    svg.setAttribute('min-width', '100%');\n    svg.setAttribute('height', '200%');\n    const dateGroup = document.createElementNS(svgNS, 'g'); // Create a group element for the task\n    dateGroup.setAttribute('class', 'date-groups');\n    svg.appendChild(dateGroup);\n    this.dateInfo = this.calculateDateInfo(tasks);\n    const chartWidth = this.calculateChartWidth(this.dateInfo);\n    this.length = this.getTotalLength(tasks);\n\n    svg.setAttribute('viewBox', `0 0 ${chartWidth} ${this.length * 40 + 40}`);\n\n    createGridLines(dateGroup, chartWidth, this.length);\n    createMonthHeadings(dateGroup, this.dateInfo, chartWidth);\n    createDateScale(dateGroup, this.dateInfo, chartWidth, this.length);\n    this.createTaskBars(svg, tasks, this.dateInfo);\n    return svg;\n  }\n\n  calculateDateInfo(tasks) {\n    const startDates = tasks.map(task => new Date(task.start));\n    const endDates = tasks.map(task => new Date(task.end));\n\n    const minDate = new Date(Math.min(...startDates));\n    const startingDate = new Date(minDate);\n    startingDate.setDate(minDate.getDate() - 5);\n\n    const maxDate = new Date(Math.max(...endDates));\n    const dateDiff = (maxDate - minDate) / (24 * 60 * 60 * 1000);\n\n    let multiplier = dateDiff > 100 ? 54 : dateDiff > 30 ? 60 : 120;\n\n    return { startingDate, maxDate, multiplier };\n  }\n\n  calculateChartWidth(dateInfo) {\n    return (dateInfo.multiplier * ((dateInfo.maxDate - dateInfo.startingDate) / (24 * 60 * 60 * 1000)));\n  }\n\n  createTaskBars(svg, tasks, dateInfo) {\n    let customIndex = 0;\n\n    tasks.forEach((task, index) => {\n      const taskGroup = document.createElementNS(svgNS, 'g'); // Create a group element for the task\n      taskGroup.setAttribute('class', 'tasks');\n      svg.appendChild(taskGroup);\n\n      const dependentTaskEnd = Math.max(...task.dependencies.map(depId => new Date(tasks[depId - 1].end)));\n      const startOffset = Math.max((dependentTaskEnd - dateInfo.startingDate) / (24 * 60 * 60 * 1000) * 50, (new Date(task.start) - dateInfo.startingDate) / (24 * 60 * 60 * 1000) * 50);\n      const duration = (new Date(task.end) - new Date(task.start)) / (24 * 60 * 60 * 1000) * 50;\n\n      const rect = document.createElementNS(svgNS, 'rect');\n      rect.setAttribute('x', startOffset);\n      rect.setAttribute('y', customIndex * 40 + 40);\n      rect.setAttribute('width', duration);\n      rect.setAttribute('height', 30);\n      rect.setAttribute('fill', '#3498db');\n      taskGroup.appendChild(rect);\n\n      const progressWidth = (duration * task.progress) / 100;\n      const progressRect = document.createElementNS(svgNS, 'rect');\n      progressRect.setAttribute('x', startOffset);\n      progressRect.setAttribute('y', customIndex * 40 + 40);\n      progressRect.setAttribute('width', progressWidth);\n      progressRect.setAttribute('height', 30);\n      progressRect.setAttribute('fill', '#2ecc71');\n      taskGroup.appendChild(progressRect);\n\n      const text = document.createElementNS(svgNS, 'text');\n      text.setAttribute('x', startOffset + 5);\n      text.setAttribute('y', customIndex * 40 + 60);\n      text.textContent = task.name;\n      taskGroup.appendChild(text);\n\n      // Render subtasks\n      if (task.subTask && task.subTask.length > 0) {\n        const subTaskGroup = document.createElementNS(svgNS, 'g'); // Create a group element for the task\n        subTaskGroup.setAttribute('class','subtask')\n        taskGroup.appendChild(subTaskGroup);\n        task.subTask.forEach((subtask, subIndex) => {\n          const subDependentTaskEnd = Math.max(...subtask.dependencies.map(depId => new Date(task.subTask[depId - 1].end)));\n          const subStartOffset = Math.max((subDependentTaskEnd - dateInfo.startingDate) / (24 * 60 * 60 * 1000) * 50, (new Date(subtask.start) - dateInfo.startingDate) / (24 * 60 * 60 * 1000) * 50);\n          const subDuration = (new Date(subtask.end) - new Date(subtask.start)) / (24 * 60 * 60 * 1000) * 50;\n\n          const subRect = document.createElementNS(svgNS, 'rect');\n          subRect.setAttribute('class','subtask')\n          subRect.setAttribute('x', subStartOffset);\n          subRect.setAttribute('y', (subIndex + customIndex + 1) * 40 + 40);\n          subRect.setAttribute('width', subDuration);\n          subRect.setAttribute('height', 15);\n          subRect.setAttribute('fill', '#e74c3c');\n          subTaskGroup.appendChild(subRect);\n\n          const subProgressWidth = (subDuration * subtask.progress) / 100;\n          const subProgressRect = document.createElementNS(svgNS, 'rect');\n          subProgressRect.setAttribute('class','subtask-progress')\n          subProgressRect.setAttribute('x', subStartOffset);\n          subProgressRect.setAttribute('y', (subIndex + customIndex + 1) * 40 + 40);\n          subProgressRect.setAttribute('width', subProgressWidth);\n          subProgressRect.setAttribute('height', 15);\n          subProgressRect.setAttribute('fill', '#c0392b');\n          subTaskGroup.appendChild(subProgressRect);\n\n          const subText = document.createElementNS(svgNS, 'text');\n          subText.setAttribute('x', subStartOffset + 5);\n          subText.setAttribute('y', (subIndex + customIndex + 1) * 40 + 50);\n          subText.textContent = subtask.name;\n          subText.setAttribute('font-size', '10px');\n          subTaskGroup.appendChild(subText);\n\n          subText.addEventListener('mouseover', () => showTaskDetails(subtask, task.subTask));\n          subRect.addEventListener('mouseover', () => showTaskDetails(subtask, task.subTask));\n          subRect.addEventListener('mouseout', hideTaskDetails);\n\n          subProgressRect.addEventListener('mouseover', () => showTaskDetails(subtask, task.subTask));\n          subProgressRect.addEventListener('mouseout', hideTaskDetails);\n\n          subRect.addEventListener('contextmenu', (event) => {\n            event.preventDefault();\n            editTask(event, subtask, task.subTask, tasks);\n          });\n          subProgressRect.addEventListener('contextmenu', (event) => {\n            event.preventDefault();\n            editTask(event, subtask, task.subTask, tasks);\n          });\n          subText.addEventListener('contextmenu', (event) => {\n            event.preventDefault();\n            editTask(event, subtask, task.subTask, tasks);\n          });\n          subRect.addEventListener('mousedown', (event) => {\n            event.preventDefault();\n            this.startDrag(event, subRect, subProgressRect , subtask , task.subTask , tasks);\n          });\n          subProgressRect.addEventListener('mousedown', (event) => {\n            event.preventDefault();\n            this.startDrag(event, subRect, subProgressRect, subtask , task.subTask , tasks)\n          });\n          subText.addEventListener('mousedown', (event) => {\n            event.preventDefault();\n            this.startDrag(event, subRect, subProgressRect , subtask , task.subTask , tasks);\n          });\n        });\n      }\n\n      // Add event listeners for both rectangle and progress bar\n      text.addEventListener('mouseover', () => showTaskDetails(task, tasks));\n      rect.addEventListener('mouseover', () => showTaskDetails(task, tasks));\n      rect.addEventListener('mouseout', hideTaskDetails);\n\n      progressRect.addEventListener('mouseover', () => showTaskDetails(task, tasks));\n      progressRect.addEventListener('mouseout', hideTaskDetails);\n\n      rect.addEventListener('contextmenu', (event) => {\n        event.preventDefault();\n        editTask(event, task, tasks);\n      });\n      progressRect.addEventListener('contextmenu', (event) => {\n        event.preventDefault();\n        editTask(event, task, tasks);\n      });\n      text.addEventListener('contextmenu', (event) => {\n        event.preventDefault();\n        editTask(event, task, tasks);\n      });\n      // Add event listeners for dragging to edit start and end dates\n      rect.addEventListener('mousedown', (event) => {\n        event.preventDefault();\n        this.startDrag(event, rect, progressRect,task ,tasks);\n      });\n      progressRect.addEventListener('mousedown', (event) => {\n        event.preventDefault();\n        this.startDrag(event, rect, progressRect ,task ,tasks)\n      });\n      text.addEventListener('mousedown', (event) => {\n        event.preventDefault();\n        this.startDrag(event, rect, progressRect,task ,tasks);\n      });     \n      document.addEventListener('mouseup', (event) => {\n        document.removeEventListener('mousemove',this.dragMoveListener)\n        this.handleMouseUp(this.taskRect, this.dependentTask, this.tasks, this.dateInfo ,this.allTasks);\n      });\n      // task below the subtask\n      customIndex = customIndex + 1;\n      if (task.subTask && task.subTask.length > 0) {\n        customIndex = customIndex + task.subTask.length;\n      }\n    });\n  }\n\n  throttle(func, limit) {\n    let inThrottle;\n    return function () {\n      const args = arguments;\n      const context = this;\n      if (!inThrottle) {\n        func.apply(context, args);\n        inThrottle = true;\n        setTimeout(() => (inThrottle = false), limit);\n      }\n    };\n  }\n\n  isExceedingDepenentEndDate(sartDate, dependentTask, tasks) {\n    const tasksWithDesiredIds = tasks.filter(task =>\n      dependentTask.dependencies.includes(task.id)\n    );\n    const endDates = tasksWithDesiredIds.map(task => new Date(task.end));\n    const maxDate = new Date(Math.max(...endDates))\n    if (maxDate > sartDate) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n  handleDragMove(event, taskRect, progress, dependentTask, tasks ,allTasks=null) {\n    event.preventDefault();\n    if (this.isDragging) {\n      this.updateTaskBarPosition(event.clientX, taskRect, progress, dependentTask, tasks ,allTasks);\n    }\n  }\n\n  startDrag(event, taskRect, taskProgressRect , dependentTask, task , allTasks=null) {\n    this.dependentTask = dependentTask ;\n    this.tasks = task ;\n    this.allTasks = allTasks ; \n    document.body.classList.add('dragging');\n    hideTaskDetails\n    this.isDragging = true;\n    this.initialX = event.clientX;\n    this.initialWidth = parseFloat(taskRect.getAttribute('width'));\n    this.isDragStart = event.clientX < taskRect.getBoundingClientRect().left + this.initialWidth / 2;\n\n    // Set the current task and progress bar\n    this.currentTaskRect = taskRect;\n    this.currentProgressRect = taskProgressRect;\n    this.dragMoveListener = this.throttle((event) => {\n      this.handleDragMove(event, this.currentTaskRect, this.currentProgressRect, dependentTask, task, allTasks);\n    }, 16); \n    event.preventDefault();\n    document.addEventListener('mousemove',this.dragMoveListener);\n\n  }\n\n  updateTaskBarPosition(clientX, taskRect, progress, dependentTask, tasks ,allTasks) {\n    const deltaX = (clientX - this.initialX) * .73 // Adjust the sensitivity factor \n    if (this.isDragStart) {\n      // Dragging start handle\n      const newStartOffset = (new Date(dependentTask.start) - this.dateInfo.startingDate) / (24 * 60 * 60 * 1000) * 50 + deltaX;\n      const startDate = new Date(this.dateInfo.startingDate.getTime() + (parseFloat(taskRect.getAttribute('x'))) / 50 * (24 * 60 * 60 * 1000));\n\n      if (this.isExceedingDepenentEndDate(startDate, dependentTask, tasks)) {\n        alert('Start Date has exceeded its dependent EndDate');\n        document.body.classList.remove('dragging');\n        this.isDragging = false;\n        const updatedTaskIndex = tasks.findIndex(t => t.id === dependentTask.id);\n        if (updatedTaskIndex !== -1) {\n          const newEndDate = new Date(startDate.getTime() + (parseFloat(taskRect.getAttribute('width')) / 52) * (24 * 60 * 60 * 1000));\n\n          // Update the properties of the task in the array\n          tasks[updatedTaskIndex].start = startDate.toISOString().split('T')[0];\n          tasks[updatedTaskIndex].end = newEndDate.toISOString().split('T')[0];\n\n          // Update the Gantt chart with the new data\n          updateTaskStartEndDates(tasks);\n          if(allTasks)\n          {\n            this.createGanttChart(allTasks);\n          }\n          else{\n            this.createGanttChart(tasks);\n          }\n        }\n      }\n\n      // const endDate = new Date(dateInfo.startingDate.getTime() + (parseFloat(taskRect.getAttribute('x')) + parseFloat(taskRect.getAttribute('width'))) / 50 * (24 * 60 * 60 * 1000));\n\n      const maxStartOffset = parseFloat(taskRect.getAttribute('x')) + parseFloat(taskRect.getAttribute('width'));\n      const adjustedStartOffset = Math.min(newStartOffset, maxStartOffset);\n      const adjustedWidth = maxStartOffset - adjustedStartOffset;\n      taskRect.setAttribute('x', newStartOffset);\n      taskRect.setAttribute('width', adjustedWidth);\n\n      progress.setAttribute('x', newStartOffset);\n      progress.setAttribute('width', adjustedWidth * dependentTask.progress / 100);\n\n    } else {\n      // Dragging end handle\n      const newWidth = this.initialWidth + deltaX;\n      taskRect.setAttribute('width', newWidth);\n      progress.setAttribute('width', newWidth * dependentTask.progress / 100);\n    }\n    this.taskRect = taskRect;\n  }\n\n  handleMouseUp(taskRect,  dependentTask, tasks, dateInfo, allTasks = null) {\n    document.body.classList.remove('dragging');\n    if (this.isDragging) {\n      this.isDragging = false\n      // Find the task in the array and update its properties\n      const updatedTaskIndex = tasks.findIndex((t) => t.id === dependentTask.id);\n      if (updatedTaskIndex !== -1) {\n        const newStartDate = new Date(\n          dateInfo.startingDate.getTime() +\n          (parseFloat(taskRect.getAttribute('x')) / 50) * (24 * 60 * 60 * 1000)\n        );\n        const newEndDate = new Date(\n          newStartDate.getTime() +\n          (parseFloat(taskRect.getAttribute('width')) / 50) * (24 * 60 * 60 * 1000)\n        );\n        // Update the properties of the task in the array\n        tasks[updatedTaskIndex].start = newStartDate.toISOString().split('T')[0];\n        tasks[updatedTaskIndex].end = newEndDate.toISOString().split('T')[0];\n        // Update the Gantt chart with the new data\n        updateTaskStartEndDates(tasks);\n        if (allTasks) {\n          this.createGanttChart(allTasks);\n        } else {\n          this.createGanttChart(tasks);\n        }\n\n      }\n    }\n\n  }\n\n  updateGanttChartContent(svg, tasks) {\n    // Clear existing content\n    while (svg.firstChild) {\n      svg.removeChild(svg.firstChild);\n    }\n    this.length = this.getTotalLength(tasks)\n    // Update the content with the new tasks\n    this.dateInfo = this.calculateDateInfo(tasks);\n    const chartWidth = this.calculateChartWidth(this.dateInfo);\n    const dateGroup = document.createElementNS(svgNS, 'g'); // Create a group element for the task\n    dateGroup.setAttribute('class', 'date-groups');\n    svg.appendChild(dateGroup);\n\n    svg.setAttribute('viewBox', `0 0 ${chartWidth} ${this.length * 40 + 40}`);\n\n    createGridLines(dateGroup, chartWidth, this.length);\n    createMonthHeadings(dateGroup, this.dateInfo, chartWidth);\n    createDateScale(dateGroup, this.dateInfo, chartWidth, this.length);\n    this.createTaskBars(svg, tasks, this.dateInfo);\n  }\n  static createChart(tasks) {\n    console.log(tasks);\n    const ganttChart = new GanttChart();\n    ganttChart.createGanttChart(tasks);\n  }\n\n  static stopDrag(){\n    // Remove the event listener when the dragging stops\n    document.removeEventListener('mousemove', this.dragMoveListener);  \n  }\n}"],"names":["svgNS","createGridLines","dateGroup","chartWidth","taskCount","gridLines","document","createElementNS","classList","add","appendChild","i","line","setAttribute","createMonthHeadings","dateInfo","month","months","currentMonth","monthIndex","Date","startingDate","getTime","getMonth","monthHeading","textContent","createDateScale","date","dateScale","currentDate","text","getDate","updateTaskStartEndDates","tasks","taskMap","Map","map","task","id","forEach","updateTaskDates","subTask","length","subTaskMap","subtask","subDuration","end","start","setDate","toISOString","split","gap","updateSubTaskStartEndDate","dependencies","dependentTasks","depId","get","maxEndDate","Math","max","depTask","dependentTask","duration","tooltip","createElement","closeEditModal","getElementById","style","display","editTask","event","allTasks","preventDefault","GanttChart","stopDrag","editModal","body","editTaskForm","innerHTML","createFormField","name","progress","editDependenciesSelect","availableTask","isTaskDependent","option","value","includes","selected","saveChangesBtn","addEventListener","alltasks","editTaskNameInput","editStartDateInput","editEndDateInput","editProgress","editedTaskName","editedStartDate","editedEndDate","taskId","parseInt","getAttribute","selectedDependencies","Array","from","selectedOptions","editedTaskIndex","findIndex","console","log","createChart","saveEditedTask","cancelBtn","labelText","inputId","inputValue","inputType","required","label","input","currentTask","otherTask","some","showTaskDetails","dependentTaskNames","dependentTaskInfo","join","left","pageX","top","pageY","hideTaskDetails","className","constructor","this","isDragging","initialX","initialWidth","isDragStart","currentTaskRect","currentProgressRect","dragMoveListener","allTask","getTotalLength","reduce","total","createGanttChart","chartContainer","svg","querySelector","updateGanttChartContent","createSVG","calculateDateInfo","calculateChartWidth","createTaskBars","startDates","endDates","minDate","min","maxDate","dateDiff","multiplier","customIndex","index","taskGroup","dependentTaskEnd","startOffset","rect","progressWidth","progressRect","subTaskGroup","subIndex","subDependentTaskEnd","subStartOffset","subRect","subProgressWidth","subProgressRect","subText","startDrag","removeEventListener","handleMouseUp","taskRect","throttle","func","limit","inThrottle","args","arguments","context","apply","setTimeout","isExceedingDepenentEndDate","sartDate","filter","handleDragMove","updateTaskBarPosition","clientX","taskProgressRect","parseFloat","getBoundingClientRect","deltaX","newStartOffset","startDate","alert","remove","updatedTaskIndex","t","newEndDate","maxStartOffset","adjustedWidth","newWidth","newStartDate","firstChild","removeChild"],"mappings":"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"}